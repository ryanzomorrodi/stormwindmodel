[{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"overview-of-wind-modeling-process","dir":"Articles","previous_headings":"","what":"Overview of wind modeling process","title":"Details of `stormwindmodel` package","text":"overview wind modeling process implemented package: Impute location maximum wind speed hurricane track data (every 6 hours) frequent intervals. default impute every 15 minutes. storm track location, calculate inputs needed Willoughby wind speed model (forward speed, direction forward motion storm, gradient-level wind speed, radius maximum winds, parameters decay winds away storm’s center Willoughby model) (Willoughby, Darling, Rahn 2006). county center (grid point), estimate surface-level sustained wind 3-second wind gusts storm observation points (.e., points along interpolated storm track). step includes: measuring distance county storm center (radius); calculating tangential gradient wind components grid point; calculating gradient wind direction grid point; calculating surface wind speed; calculating surface wind direction, adding storm forward motion back surface wind estimate. Determine county: maximum sustained winds wind gust speeds point storm’s track; duration sustained gust winds certain speed (.e., many minutes winds cutoff). process conducted stormwindmodel package using three main functions: create_full_track, add_wind_radii, calc_grid_wind. functions number helper functions required modeling step. Details included vignette. full process wrapped get_grid_winds function, main function people use package.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"variable-definitions","dir":"Articles","previous_headings":"","what":"Variable definitions","title":"Details of `stormwindmodel` package","text":"variables used modeling process.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"impute-storm-tracks","dir":"Articles","previous_headings":"","what":"Impute storm tracks","title":"Details of `stormwindmodel` package","text":"tropical cyclone best tracks observations every six hours (plus, , observation landfall). package function called create_full_track imputes locations (latitude longitude) intensity (maximum wind speed) hurricane tracks data finer time resolution (default 15 minutes, can also select values using tint argument). imputation uses natural cubic spline, degrees freedom set number timed observations storm input data (typically best tracks data) divided two. option tint function gives time interval want use, hours (e.g., 0.25 15 minutes). Note: code assumes tracking data read measured knots, 10 m surface level, taken 1-minute average period. example running function, floyd_tracks dataframe hurricane track information Hurricane Floyd (saved data package), tint desired time interval impute: example interpolating Hurricane Floyd’s tracks 15-minute 2-hour intervals  function includes correction case storm tracks cross International Date line. case, longitude might change close -180 close 180, vice versa. track interpolation checks large differences longitude might happen case. changes, function brings longitudes similar range, avoid problems interpolation across International Date line. interpolation, longitudes brought -180 180. code create_full_track function adjusts storm tracks large differences longitude, likely cross International Date line: code create_full_track function ensures output location data remain within -180 180 longitude:","code":"stormwindmodel::create_full_track ## function (hurr_track = stormwindmodel::floyd_tracks, tint = 0.25)  ## { ##     hurr_track <- hurr_track[c(\"date\", \"latitude\", \"longitude\",  ##         \"wind\")] ##     colnames(hurr_track) <- c(\"date\", \"tclat\", \"tclon\", \"vmax\") ##     hurr_track$date <- lubridate::ymd_hm(hurr_track$date) ##     hurr_track$tclat <- as.numeric(hurr_track$tclat) ##     hurr_track$tclon <- as.numeric(hurr_track$tclon) ##     hurr_track$vmax <- weathermetrics::convert_wind_speed(hurr_track$vmax,  ##         \"knots\", \"mps\", round = 3) ##     hurr_track$track_time_simple = as.numeric(difftime(hurr_track$date,  ##         hurr_track$date[1], units = \"hour\")) ##     if (diff(range(hurr_track$tclon)) > 300) { ##         hurr_track$tclon <- ifelse(hurr_track$tclon > 0, hurr_track$tclon,  ##             hurr_track$tclon + 360) ##     } ##     interp_time <- seq(from = hurr_track$track_time_simple[[1]],  ##         to = hurr_track$track_time_simple[[nrow(hurr_track)]],  ##         by = tint) ##     tclat <- sapply(interp_time, function(time_to_interp) { ##         interpolate_spline(x = hurr_track$track_time_simple,  ##             y = hurr_track$tclat, new_x = time_to_interp) ##     }) ##     tclon <- sapply(interp_time, function(time_to_interp) { ##         interpolate_spline(x = hurr_track$track_time_simple,  ##             y = hurr_track$tclon, new_x = time_to_interp) ##     }) ##     tclon <- ((tclon + 180)%%360) - 180 ##     vmax <- sapply(interp_time, function(time_to_interp) { ##         interpolate_line(x = hurr_track$track_time_simple, y = hurr_track$vmax,  ##             new_x = time_to_interp) ##     }) ##     date <- hurr_track$date[1] + lubridate::seconds(3600 * interp_time) ##     full_track <- data.frame(date, tclat, tclon, vmax) ##     return(full_track) ## } ## <bytecode: 0x55a92f6cb210> ## <environment: namespace:stormwindmodel> data(\"floyd_tracks\") full_track <- create_full_track(hurr_track = floyd_tracks, tint = 0.25) full_track %>% slice(1:3) ##                  date    tclat     tclon     vmax ## 1 1999-09-07 18:00:00 14.60000 -45.60000 12.86100 ## 2 1999-09-07 18:15:00 14.61835 -45.65439 12.96817 ## 3 1999-09-07 18:30:00 14.63669 -45.70879 13.07533 library(sf) library(maps) library(ggplot2)  floyd_states <- sf::st_as_sf(map(\"state\", plot = FALSE, fill = TRUE)) %>%    dplyr::filter(ID %in% c(\"north carolina\", \"south carolina\", \"maryland\",                           \"georgia\", \"florida\", \"virginia\", \"delaware\",                            \"pennsylvania\", \"west virginia\", \"new jersey\",                           \"new york\")) floyd_15_min <- create_full_track(floyd_tracks) floyd_2_hrs <- create_full_track(floyd_tracks, tint = 2) floyd_15_min <- floyd_15_min %>%    st_as_sf(coords = c(\"tclon\", \"tclat\")) %>%    st_set_crs(4326) floyd_2_hrs <- floyd_2_hrs %>%    st_as_sf(coords = c(\"tclon\", \"tclat\")) %>%    st_set_crs(4326)  a <- ggplot() +    geom_sf(data = floyd_states,            fill = \"aliceblue\") +    xlim(c(-90, -70)) +    ylim(c(24, 46)) b <- a +   geom_sf(data = floyd_15_min,           size = 0.5, color = \"red\") +    ggtitle(\"Interpolated to 15 minutes\") c <- a +      geom_sf(data = floyd_2_hrs,             size = 0.5, color = \"red\") +    ggtitle(\"Interpolated to 2 hours\")   gridExtra::grid.arrange(b, c, ncol = 2) # Identify cases where a storm goes over the international date line, and   # longitudes change from about 180 to about -180, or vice versa. Correct this   # before interpolating (then later we get everything back within the 180 to -180   # range).   if(diff(range(hurr_track$tclon)) > 300){     hurr_track <- hurr_track %>%       dplyr::mutate(tclon = ifelse(tclon > 0, tclon, tclon + 360))   } # Make sure that longitude is between -180 and 180     dplyr::mutate(tclon = ((tclon + 180) %% 360) - 180)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"add-willoughby-inputs-and-parameters","dir":"Articles","previous_headings":"","what":"Add Willoughby inputs and parameters","title":"Details of `stormwindmodel` package","text":"Next, imputed track input function adds inputs model parameters observation required model later used estimate wind speed grid point (Willoughby, Darling, Rahn 2006). process done using add_wind_radii function. Hurricane Floyd example, example running code first three last three line output: example Hurricane Floyd tracks, estimated \\(R_{max}\\) \\(V_{max,G}\\) shown point size color, respectively: last line observations missing values, need points current point calculate forward speed bearing storm, values calculated last observation. full code add_wind_radii function: function uses many helper functions, step process calculate inputs parameters wind model. helper functions fully described .","code":"library(dplyr) library(stormwindmodel) with_wind_radii <- stormwindmodel::add_wind_radii(full_track = full_track) with_wind_radii %>%    slice(c(1:3, (n()-3):n())) ##                  date    tclat     tclon     tcdir   tcspd_u  tcspd_v  vmax_gl ## 1 1999-09-07 18:00:00 14.60000 -45.60000 160.77154 -6.510216 2.270724 10.45952 ## 2 1999-09-07 18:15:00 14.61835 -45.65439 160.78633 -6.509378 2.268546 10.57943 ## 3 1999-09-07 18:30:00 14.63669 -45.70879 160.81744 -6.508274 2.264199 10.69988 ## 4 1999-09-19 11:15:00 49.36201 -48.57620  20.24771 15.451027 5.699482 13.35794 ## 5 1999-09-19 11:30:00 49.40793 -48.38422  20.29128 15.444560 5.710443 13.47827 ## 6 1999-09-19 11:45:00 49.45394 -48.19213  20.32410 15.433695 5.716479 13.60185 ## 7 1999-09-19 12:00:00 49.50000 -48.00000        NA        NA       NA       NA ##       Rmax       X1         n          A       R1       R2 ## 1 50.49715 323.8680 0.5018371 0.02741166 35.19583 60.19583 ## 2 50.41901 323.6602 0.5034941 0.02788177 35.10915 60.10915 ## 3 50.34057 323.4513 0.5051589 0.02835462 35.02214 60.02214 ## 4 86.87492 384.5651 0.4114787 0.00000000 72.86723 97.86723 ## 5 86.78035 384.4092 0.4130370 0.00000000 72.76166 97.76166 ## 6 86.68167 384.2470 0.4146416 0.00000000 72.65167 97.65167 ## 7       NA       NA        NA         NA       NA       NA stormwindmodel::add_wind_radii ## function (full_track = create_full_track())  ## { ##     with_wind_radii <- full_track ##     with_wind_radii$tcspd <- calc_forward_speed(tclat_1 = with_wind_radii$tclat,  ##         tclon_1 = with_wind_radii$tclon, time_1 = with_wind_radii$date,  ##         tclat_2 = c(with_wind_radii$tclat[-1], NA), tclon_2 = c(with_wind_radii$tclon[-1],  ##             NA), time_2 = c(with_wind_radii$date[-1], NA)) ##     with_wind_radii$tcdir <- calc_bearing(tclat_1 = with_wind_radii$tclat,  ##         tclon_1 = with_wind_radii$tclon, tclat_2 = c(with_wind_radii$tclat[-1],  ##             NA), tclon_2 = c(with_wind_radii$tclon[-1], NA)) ##     with_wind_radii$tcspd_u = with_wind_radii$tcspd * cos(degrees_to_radians(with_wind_radii$tcdir)) ##     with_wind_radii$tcspd_v = with_wind_radii$tcspd * sin(degrees_to_radians(with_wind_radii$tcdir)) ##     with_wind_radii$vmax_sfc_sym = remove_forward_speed(vmax = with_wind_radii$vmax,  ##         tcspd = with_wind_radii$tcspd) ##     with_wind_radii$over_land = mapply(check_over_land, tclat = with_wind_radii$tclat,  ##         tclon = with_wind_radii$tclon) ##     with_wind_radii$vmax_gl = mapply(calc_gradient_speed, vmax_sfc_sym = with_wind_radii$vmax_sfc_sym,  ##         over_land = with_wind_radii$over_land) ##     with_wind_radii$Rmax = will7a(with_wind_radii$vmax_gl, with_wind_radii$tclat) ##     with_wind_radii$X1 = will10a(with_wind_radii$vmax_gl, with_wind_radii$tclat) ##     with_wind_radii$n = will10b(with_wind_radii$vmax_gl, with_wind_radii$tclat) ##     with_wind_radii$A = will10c(with_wind_radii$vmax_gl, with_wind_radii$tclat) ##     with_wind_radii$eq3_right = will3_right(with_wind_radii$n,  ##         with_wind_radii$A, with_wind_radii$X1, with_wind_radii$Rmax) ##     with_wind_radii$xi = mapply(solve_for_xi, eq3_right = with_wind_radii$eq3_right) ##     with_wind_radii$R1 = calc_R1(with_wind_radii$Rmax, with_wind_radii$xi) ##     with_wind_radii$R2 = ifelse(with_wind_radii$Rmax > 20, with_wind_radii$R1 +  ##         25, with_wind_radii$R1 + 15) ##     with_wind_radii <- with_wind_radii[c(\"date\", \"tclat\", \"tclon\",  ##         \"tcdir\", \"tcspd_u\", \"tcspd_v\", \"vmax_gl\", \"Rmax\", \"X1\",  ##         \"n\", \"A\", \"R1\", \"R2\")] ##     return(with_wind_radii) ## } ## <bytecode: 0x55a931fe1790> ## <environment: namespace:stormwindmodel>"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"calculate-the-storms-forward-speed","dir":"Articles","previous_headings":"Add Willoughby inputs and parameters","what":"Calculate the storm’s forward speed","title":"Details of `stormwindmodel` package","text":"First, code determines forward speed storm observation, meters per second. forward speed storm needs removed observed maximum wind speed get estimate maximum wind speed associated just rotational movement storm, needs go Willoughby model (Willoughby, Darling, Rahn 2006). asymmetry needs removed convert winds gradient level. code adds back forward motion component surface winds grid points near end modeling process. code uses Haversine method great circle distance calculate distance, kilometers, storm’s latitude longitude coordinates current observation following observation. time difference determined two observations. , storm’s forward speed calculated. speed converted meters per second (kilometers per hour), ’s units \\(V_{max}\\) imputed storm tracks. equation used code Haversine method great circle distance calculate distance two locations based latitudes longitude: \\[ hav(\\gamma) = hav(\\phi_1 - \\phi_2) + cos(\\phi_1)*cos(\\phi_2)*hav(L_1 - L_2) \\] \\[ D = R_{earth} * \\gamma \\] : \\(\\phi_{1,rad}\\): Latitude first location, radians \\(L_{1,rad}\\): Longitude first location, radians \\(\\phi_{2,rad}\\): Latitude second location, radians \\(L_{2,rad}\\): Longitude second location, radians \\(\\gamma\\): Intermediary result \\(hav(\\gamma)\\): haversine function, \\(hav(\\gamma) = sin^2 \\left(\\frac{\\gamma}{2}\\right)\\) \\(R_{earth}\\): Radius earth, assumed 6378.14 kilometers \\(D\\): Distance two locations, kilometers package, helper function convert degrees radians (degrees_to_radians), well function called latlon_to_km uses Haversine method calculate distance two storm center locations (tclat_1 tclat_2 two storm center latitudes; tclon_1 tclon_2 two storm center longitudes): package uses functions function called calc_forward_speed calculates distance two storm locations, calculates time difference observation times, determines forward speed kilometers per hour converts meters per second.","code":"stormwindmodel:::degrees_to_radians ## function (degrees)  ## { ##     .Call(`_stormwindmodel_degrees_to_radians`, degrees) ## } ## <bytecode: 0x55a931f814e0> ## <environment: namespace:stormwindmodel> stormwindmodel:::latlon_to_km ## function (tclat_1, tclon_1, tclat_2, tclon_2, Rearth = 6378.14)  ## { ##     .Call(`_stormwindmodel_latlon_to_km`, tclat_1, tclon_1, tclat_2,  ##         tclon_2, Rearth) ## } ## <bytecode: 0x55a92ee55788> ## <environment: namespace:stormwindmodel> stormwindmodel:::calc_forward_speed ## function (tclat_1, tclon_1, time_1, tclat_2, tclon_2, time_2)  ## { ##     .Call(`_stormwindmodel_calc_forward_speed`, tclat_1, tclon_1,  ##         time_1, tclat_2, tclon_2, time_2) ## } ## <bytecode: 0x55a931fd0948> ## <environment: namespace:stormwindmodel>"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"calculate-direction-of-storm-movement","dir":"Articles","previous_headings":"Add Willoughby inputs and parameters","what":"Calculate direction of storm movement","title":"Details of `stormwindmodel` package","text":"Next, code calculates direction motion storm (storm bearing). Later code use add back component forward motion storm wind estimates. following equation used calculate bearing one point another point based latitude longitude. , calculating bearing later storm observation, seen earlier storm observation. function restricts output 0 360 degrees using modular arithmetic (%% 360). \\[ S = cos(\\phi_{2,rad}) * sin(L_{1,rad} - L_{2,rad}) \\] \\[ C = cos(\\phi_{1,rad}) * sin(\\phi_{2,rad}) - sin(\\phi_{1,rad}) * cos(\\phi_{2,rad}) * cos(L_{1,rad} - L_{2,rad}) \\] \\[ \\theta_{F} = atan2(S, C) * \\frac{180}{\\pi} + 90 \\] : \\(\\phi_{1,rad}\\): Latitude first location, radians \\(L_{1,rad}\\): Longitude first location, radians \\(\\phi_{2,rad}\\): Latitude second location, radians \\(L_{2,rad}\\): Longitude second location, radians \\(S\\), \\(C\\): Intermediary results \\(\\theta_F\\) direction storm movement, degrees direction storm movement (\\(\\theta_F\\)) given polar coordinates, 0 degrees representing movement due East, 90 degrees due North, :  calculation implemented package calc_bearing function:","code":"stormwindmodel::calc_bearing ## function (tclat_1, tclon_1, tclat_2, tclon_2)  ## { ##     .Call(`_stormwindmodel_calc_bearing`, tclat_1, tclon_1, tclat_2,  ##         tclon_2) ## } ## <bytecode: 0x55a931f85c88> ## <environment: namespace:stormwindmodel>"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"calculate-u--and-v-components-of-forward-speed","dir":"Articles","previous_headings":"Add Willoughby inputs and parameters","what":"Calculate u- and v-components of forward speed","title":"Details of `stormwindmodel` package","text":"Next, code uses estimated magnitude direction storm’s forward speed calculate u- v-components forward speed. Later, two components added back modeled surface wind speed grid points, adjusting Phadke correction factor forward motion (Phadke et al. 2003). calculate u- v-components forward motion, \\(F_{u}\\) \\(F_{v}\\), function uses: \\[ F_{u} = \\left|\\overrightarrow{F}\\right| cos(\\theta_F) \\] \\[ F_{v} = \\left|\\overrightarrow{F}\\right| sin(\\theta_F) \\] \\(\\theta_F\\) direction storm movement (0 due east, 90 due north, etc.).","code":"tcspd_u = tcspd * cos(degrees_to_radians(tcdir)) tcspd_v = tcspd * sin(degrees_to_radians(tcdir))"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"adjust-wind-speed-to-remove-forward-motion-of-storm","dir":"Articles","previous_headings":"Add Willoughby inputs and parameters","what":"Adjust wind speed to remove forward motion of storm","title":"Details of `stormwindmodel` package","text":"Next, ’s function called remove_forward_speed uses estimated forward speed adjust wind speed remove component forward motion, based equation 12 (accompanying text) Phadke et al. (2003). code adjusting maximum sustained wind remove component forward speed, can assume adjusting wind speed radius maximum winds winds blowing direction direction forward motion storm. Therefore, correction term forward motion \\(U = 0.5F\\) (Phadke et al. 2003), half total forward speed storm. correction factor subtracted maximum sustained wind speed remove forward component, assume maximum winds blowing direction direction storm’s forward motion, correction term directly subtracted magnitude wind speed (rather breaking u- v-components vector addition). \\(V_{max}\\) removing forward storm motion ever negative, remove_forward_speed function resets value 0 m / s.","code":"stormwindmodel:::remove_forward_speed ## function (vmax, tcspd)  ## { ##     vmax_sfc_sym <- vmax - 0.5 * tcspd ##     vmax_sfc_sym[vmax_sfc_sym < 0] <- 0 ##     return(vmax_sfc_sym) ## } ## <bytecode: 0x55a931f78600> ## <environment: namespace:stormwindmodel>"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"convert-symmetric-surface-wind-to-gradient-wind","dir":"Articles","previous_headings":"Add Willoughby inputs and parameters","what":"Convert symmetric surface wind to gradient wind","title":"Details of `stormwindmodel` package","text":"extended tracks database gives maximum winds 1-minute sustained wind speeds 10 meters ground. make calculations easier (deal friction), code converts symmetric 1-minute sustained wind speeds 10 meters (\\(V_{max,sym}\\)) gradient wind speed (\\(V_{max,G}\\)), using following equation: \\[ V_{max,G} = \\frac{V_{max,sym}}{f_r} \\] : \\(V_{max,G}\\): Maximum gradient-level 1-minute sustained wind (m/s) \\(V_{max,sym}\\): Maximum 10-m 1-minute sustained wind motion asymmetry removed (m/s) \\(f_r\\): Reduction factor \\(r \\le\\) 100 km. point, winds calculated \\(r = R_{max}\\). code uses reduction factor Figure 3 Knaff et al. (2011). assume \\(R_{max}\\) always 100 km less. , \\(f_r\\) 0.9 storm’s center water 80% , 0.72, storm’s center land (Knaff et al. 2011). determine storm center land water, package includes dataset called landmask, locations grid points worldwide, factor saying whether point land water: check_over_land function finds closest grid point storm location determines whether storm land water observed location. example applying function tracks Hurricane Floyd:  add_wind_radii function, code check whether point land water apply proper reduction factor:","code":"stormwindmodel::calc_gradient_speed ## function (vmax_sfc_sym, over_land)  ## { ##     reduction_factor <- 0.9 ##     if (over_land) { ##         reduction_factor <- reduction_factor * 0.8 ##     } ##     vmax_gl <- vmax_sfc_sym/reduction_factor ##     return(vmax_gl) ## } ## <bytecode: 0x55a932144c90> ## <environment: namespace:stormwindmodel> data(landmask) landmask[1:5, 1:5] ##        -60.0   -59.8   -59.6   -59.4   -59.2   ## -179.8 \"water\" \"water\" \"water\" \"water\" \"water\" ## -179.6 \"water\" \"water\" \"water\" \"water\" \"water\" ## -179.4 \"water\" \"water\" \"water\" \"water\" \"water\" ## -179.2 \"water\" \"water\" \"water\" \"water\" \"water\" ## -179.0 \"water\" \"water\" \"water\" \"water\" \"water\" stormwindmodel:::check_over_land ## function (tclat, tclon)  ## { ##     lon_index <- which.min(abs(as.numeric(rownames(stormwindmodel::landmask)) -  ##         tclon)) ##     lat_index <- which.min(abs(as.numeric(colnames(stormwindmodel::landmask)) -  ##         tclat)) ##     over_land <- stormwindmodel::landmask[lon_index, lat_index] ==  ##         \"land\" ##     return(over_land) ## } ## <bytecode: 0x55a931f780e8> ## <environment: namespace:stormwindmodel> floyd_tracks$land <- mapply(stormwindmodel:::check_over_land,                             tclat = floyd_tracks$latitude,                             tclon = floyd_tracks$longitude)  landmask_df <- landmask %>%    as.data.frame() %>%    rownames_to_column(\"longitude\") %>%    pivot_longer(-longitude, names_to = \"latitude\", values_to = \"land\") %>%    mutate(longitude = as.numeric(longitude),           latitude = as.numeric(latitude))  ggplot(landmask_df, aes(x = longitude, y = latitude, color = land)) +   geom_point() +    geom_point(data = floyd_tracks, aes(x = longitude, y = latitude,                                       color = NULL, shape = land)) +    scale_color_discrete(\"Land mask\") +    scale_shape_discrete(\"Track over land\") +    xlim(c(-100, -40)) +    ylim(c(15, 50)) +   coord_map() over_land = mapply(check_over_land, tclat, tclon), vmax_gl = mapply(calc_gradient_speed,                 vmax_sfc_sym = vmax_sfc_sym,                 over_land = over_land)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"calculate-radius-of-maximum-wind-speed","dir":"Articles","previous_headings":"Add Willoughby inputs and parameters","what":"Calculate radius of maximum wind speed","title":"Details of `stormwindmodel` package","text":"Next, package code calculates \\(R_{max}\\), radius maximum wind speed, using Eq. 7a Willoughby et al. (2006): \\[ R_{max} = 46.4 e^{- 0.0155 V_{max,G} + 0.0169 \\lvert \\phi \\rvert} \\] : \\(R_{max}\\): Radius storm center point maximum wind occurs (km) \\(V_{max,G}\\): Maximum gradient-level 1-min sustained wind (m / s) \\(\\phi\\): Latitude, decimal degrees. absolute value taken, factor far storm equator—taking absolute value accommodates Southern Hemisphere storms.","code":"stormwindmodel::will7a ## function (vmax_gl, tclat)  ## { ##     .Call(`_stormwindmodel_will7a`, vmax_gl, tclat) ## } ## <bytecode: 0x55a931fca8d8> ## <environment: namespace:stormwindmodel>"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"calculate-parameters-for-willoughby-model","dir":"Articles","previous_headings":"Add Willoughby inputs and parameters","what":"Calculate parameters for Willoughby model","title":"Details of `stormwindmodel` package","text":"Next, code calculates \\(X_1\\), parameter needed Willoughby model. done using equation 10a Willoughby et al. (2006): \\[ X_1 = 317.1 - 2.026V_{max,G} + 1.915 \\lvert \\phi \\rvert \\] : \\(X_1\\): Parameter Willoughby wind model \\(V_{max,G}\\): Maximum gradient-level 1-min sustained wind (m / s) \\(\\phi\\): Latitude, decimal degrees Next, code calculates another Willoughby parameter, \\(n\\). done equation 10b Willoughby et al. (2006): \\[ n = 0.4067 + 0.0144 V_{max,G} - 0.0038 \\lvert \\phi \\rvert \\] : \\(n\\): exponential power law inside eye \\(V_{max,G}\\): Maximum gradient-level 1-min sustained wind (m / s) \\(\\phi\\): Latitude, decimal degrees Next, code calculates another Willoughby parameter, \\(\\), equation 10c Willoughby et al. (2006): \\[ = 0.0696 + 0.0049 V_{max,G} - 0.0064 \\lvert \\phi \\rvert \\] \\[ = \\begin{cases} 0 & \\text{ } < 0\\\\ & \\text{ otherwise } \\end{cases} \\] : \\(\\): parameter Willoughby model \\(V_{max,G}\\): Maximum gradient-level 1-min sustained wind (m / s) \\(\\phi\\): Absolute value latitude (degrees)","code":"stormwindmodel::will10a stormwindmodel::will10b stormwindmodel::will10c"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"determine-radius-of-start-of-transition-region","dir":"Articles","previous_headings":"Add Willoughby inputs and parameters","what":"Determine radius of start of transition region","title":"Details of `stormwindmodel` package","text":"Now, code uses numerical method determine value \\(R_1\\), radius start transition region, storm given track observation. requires finding root equation (Willoughby, Darling, Rahn 2006): \\[ w - \\frac{n ((1 - ) X_1 + 25 )}{n ((1 - ) X_1 + 25 ) + R_{max}} = 0 \\] : \\(w\\): weighting function (function \\(R_{max}\\), \\(R_1\\), \\(R_2 - R_1\\); see ) \\(n\\): parameter Willoughby model \\(R_{max}\\): Radius maximum wind occurs (km) \\(\\): parameter Willoughby model \\(X_1\\): parameter Willoughby model \\(X_2\\): parameter Willoughby model, set 25 (Willoughby, Darling, Rahn 2006) weighting function, \\(w\\), : \\[ w = \\begin{cases} 0 & \\text{} \\xi < 0 \\\\ 126 \\xi^5 - 420 \\xi^6 + 540 \\xi^7- 315 \\xi^8 + 70 \\xi^9 & \\text{} 0 \\le \\xi \\le 1\\\\ 1 & \\text{} \\xi > 1 \\end{cases} \\] : \\[ \\xi = \\frac{R_{max} - R_1}{R_2 - R_1} \\] : \\(w\\): weighting function \\(\\xi\\): nondimensional argument \\(R_{max}\\): radius maximum wind occurs (km) \\(R_1\\): lower boundary transition zone (km storm center) \\(R_2\\): upper boundary transition zone (km storm center) find root equation, package function uses Newton-Raphson method (Press et al. 2002; Jones, Maillardet, Robinson 2009). function starts initial guess root, \\(x_0\\), calculates new values \\(x_{n+1}\\) using: \\[ x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)} \\] process iterates either absolute value \\(f(x_{n+1})\\) smaller threshold (\\(\\epsilon\\); default 0.001 function) maximum allowed number iterations reached (default 100 iterations function). case, ’re using try find value \\(\\xi\\) root following function: \\[ f(\\xi) = 126 \\xi^5 - 420 \\xi^6 + 540 \\xi^7- 315 \\xi^8 + 70 \\xi^9 - \\frac{n ((1 - ) X_1 + 25 )}{n ((1 - ) X_1 + 25 ) + R_{max}} \\] derivative function, also needed Newton-Raphson method, : \\[ f'(\\xi) = 5 * 126 \\xi^4 - 6 * 420 \\xi^5 + 7 * 540 \\xi^6 - 8 * 315 \\xi^7 + 9 * 70 \\xi^8 \\] Newton-Raphson method can sometimes perform poorly finding global maxima, case function trying find root well-behaved. Across tropical storms 1988 2015, method never failed converge, identified roots consistent across storms (typically roots \\(\\xi\\) 0.6–0.65). also tested using optim function stats R package found similar estimated roots slower convergence times using Newton-Raphson method. Now equation Willoughby et al. 2006 paper can used calculate \\(R_1\\) (Willoughby, Darling, Rahn 2006): \\[ R_1 = R_{max} - \\xi(R_2 - R_1) \\] function, package code assumes \\(R_2 - R_1\\) (width transition region) 25 kilometers \\(R_{max}\\) larger 20 kilometers 15 kilometers otherwise.","code":"stormwindmodel::will3_right stormwindmodel::will3_deriv_func ## function (xi, eq3_right)  ## { ##     deriv <- 70 * 9 * xi^8 - 315 * 8 * xi^7 + 540 * 7 * xi^6 -  ##         420 * 6 * xi^5 + 126 * 5 * xi^4 ##     func <- 70 * xi^9 - 315 * xi^8 + 540 * xi^7 - 420 * xi^6 +  ##         126 * xi^5 - eq3_right ##     deriv_func <- c(deriv, func) ##     return(deriv_func) ## } ## <bytecode: 0x55a931fbc008> ## <environment: namespace:stormwindmodel> stormwindmodel::solve_for_xi ## function (xi0 = 0.5, eq3_right, eps = 0.001, itmax = 100)  ## { ##     if (is.na(eq3_right)) { ##         return(NA) ##     } ##     else { ##         i <- 1 ##         xi <- xi0 ##         while (i <= itmax) { ##             deriv_func <- will3_deriv_func(xi, eq3_right) ##             if (abs(deriv_func[2]) <= eps) { ##                 break ##             } ##             xi <- xi - deriv_func[2]/deriv_func[1] ##         } ##         if (i < itmax) { ##             return(xi) ##         } ##         else { ##             warning(\"Newton-Raphson did not converge.\") ##             return(NA) ##         } ##     } ## } ## <bytecode: 0x55a931fbd780> ## <environment: namespace:stormwindmodel> stormwindmodel::calc_R1"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"determine-radius-for-end-of-transition-region","dir":"Articles","previous_headings":"Add Willoughby inputs and parameters","what":"Determine radius for end of transition region","title":"Details of `stormwindmodel` package","text":"Next, code estimates radius end transition period, \\(R_2\\). assume smaller storms (\\(R_{max} \\le 20\\mbox{ km}\\)) transition region 15 km larger storms (\\(R_{max} > 20\\mbox{ km}\\)) transition region 25 km: \\[ R_2 = \\begin{cases} R_1 + 25 & \\text{ } R_{max} > 20\\mbox{ km}\\\\ R_1 + 15 & \\text{ } R_{max} \\le 20\\mbox{ km} \\end{cases} \\] : \\(R_1\\): Radius start transition region (km) \\(R_2\\): Radius end transition region (km)","code":"R2 = ifelse(Rmax > 20, R1 + 25, R1 + 15)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"calculate-wind-speed-at-each-grid-point","dir":"Articles","previous_headings":"","what":"Calculate wind speed at each grid point","title":"Details of `stormwindmodel` package","text":"Next, code models wind speed location (e.g., county center). note, function calculates wind characteristics single location; later function applies function across many grid points): , function uses lot helper functions step. input, function requires dataframe output add_wind_radii (gives parameters Willoughby model point storm’s track) also location (latitude longitude) model winds. work well later functions, location information input one-row dataframe rather vector. grid_point input might therefore look something like : package includes dataset called county_points population mean centers county hurricane-prone states. dataset can used directly package determine county-level exposures. grid_point input must follow specific format. column names latitude longitude must glat glon, decimal degrees, degrees East longitude (, negative values Western hemisphere) degrees North latitude. example running calc_grid_wind function, well typical output function. Notice function outputs wind estimates one grid point time; example, point Dare County, NC, (FIPS 37055) Hurricane Floyd: plot modeled sustained surface winds Dare County time:  can also apply function across grid points storm observations create large dataset estimated wind speed county observation point. example, run Floyd plot winds particular time “snap shots” using following code:  calculating grid wind time series grid point, can input time series grid point summarize_grid_wind generate overall storm summaries grid point. functions calculate wind characteristics grid point (county center location) every storm observation. characteristics : vmax_gust: Maximum value surface-level (10 meters) sustained winds, meters per second, length storm given location vmax_sust: Maximum value surface-level (10 meters) gust winds, meters per second, length storm given location gust_dur: Length time, minutes, surface-level sustained winds certain wind speed cutoff (e.g., 20 meters per second) sust_dur: Length time, minutes, surface-level gust winds certain wind speed cutoff (e.g., 20 meters per second) function inputs grid wind time series grid point outputs summary statistics grid point: want, can change wind speed cutoffs duration measurements: function calc_and_summarize_grid_wind combines two actions (mainly useful main wrapper function package): calc_grid_wind function uses number helper functions. described detail .","code":"stormwindmodel::calc_grid_wind ## function (grid_point = stormwindmodel::county_points[1, ], with_wind_radii = add_wind_radii(),  ##     max_dist = 2222.4)  ## { ##     grid_calc <- calc_grid_winds_cpp(glat = grid_point$glat,  ##         glon = grid_point$glon, glandsea = grid_point$glandsea,  ##         max_dist = max_dist, tclat = with_wind_radii$tclat, tclon = with_wind_radii$tclon,  ##         Rmax = with_wind_radii$Rmax, R1 = with_wind_radii$R2,  ##         R2 = with_wind_radii$R2, vmax_gl = with_wind_radii$vmax_gl,  ##         n = with_wind_radii$n, A = with_wind_radii$A, X1 = with_wind_radii$X1,  ##         tcspd_u = with_wind_radii$tcspd_u, tcspd_v = with_wind_radii$tcspd_v) ##     grid_wind <- tibble::tibble(date = with_wind_radii$date,  ##         windspeed = grid_calc[[\"vmax_sust\"]][, 1], dist_from_storm = grid_calc[[\"distance_from_storm\"]][,  ##             1], surface_wind_direction = grid_calc[[\"surface_wind_direction\"]][,  ##             1]) ##     return(grid_wind) ## } ## <bytecode: 0x55a935e4c530> ## <environment: namespace:stormwindmodel> ##   gridid     glat      glon glandsea ## 1  01001 32.50039 -86.49416     TRUE grid_point <- county_points %>% filter(gridid == \"37055\") grid_wind <- calc_grid_wind(grid_point = grid_point,                             with_wind_radii = with_wind_radii) grid_wind %>% slice(1:5) ## # A tibble: 5 × 4 ##   date                windspeed dist_from_storm surface_wind_direction ##   <dttm>                  <dbl>           <dbl>                  <dbl> ## 1 1999-09-07 18:00:00         0           3814.                     NA ## 2 1999-09-07 18:15:00         0           3808.                     NA ## 3 1999-09-07 18:30:00         0           3802.                     NA ## 4 1999-09-07 18:45:00         0           3797.                     NA ## 5 1999-09-07 19:00:00         0           3791.                     NA ggplot(grid_wind, aes(x = date, y = windspeed)) +    geom_line() +    xlab(\"Observation time (UTC)\") +    ylab(\"Modeled surface wind (m / s)\") county_list <- split(county_points, f = county_points$gridid) county_winds <- lapply(county_list, FUN = calc_grid_wind,                        with_wind_radii = with_wind_radii) names(county_winds) <- county_points$gridid county_winds <- bind_rows(county_winds, .id = \"gridid\")  county_winds %>%   filter(date == \"1999-09-16 08:00:00 UTC\") %>%   map_wind(value = \"windspeed\") stormwindmodel::summarize_grid_wind summarize_grid_wind(grid_wind = grid_wind) summarize_grid_wind(grid_wind = grid_wind, gust_duration_cut = 15,                      sust_duration_cut = 15) calc_and_summarize_grid_wind(grid_point = grid_point,                               with_wind_radii = with_wind_radii,                              gust_duration_cut = 15,                               sust_duration_cut = 15)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"get-the-radius-from-the-storm-center-to-the-grid-point","dir":"Articles","previous_headings":"Calculate wind speed at each grid point","what":"Get the radius from the storm center to the grid point","title":"Details of `stormwindmodel` package","text":"first step determine distance grid point center storm (\\(C_{dist}\\)). done using Haversine method great circle distance calculate distance. , package uses latlon_to_km function given code shown earlier.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"determine-gradient-wind-speed-at-each-location","dir":"Articles","previous_headings":"Calculate wind speed at each grid point","what":"Determine gradient wind speed at each location","title":"Details of `stormwindmodel` package","text":"Next, package calculates \\(V_G(r)\\), gradient level 1-minute sustained wind grid point, radius \\(r\\) tropical cyclone center (\\(C_{dist}\\) grid point). Note different equations \\(V_G(r)\\) (1) eye start transition region; (2) outside transition region; (3) within transition region. First, \\(r \\le R_1\\) (inside transition region), \\(V_G(r)\\) calculated using (equation 1a, Willoughby, Darling, Rahn 2006): \\[ V_G(r) = V_i = V_{max,G} \\left( \\frac{r}{R_{max}} \\right)^n, (0 \\le r \\le R_1) \\] Next, \\(r \\ge R_2\\) (outside transition region), \\(V_G(r)\\) calculated using (equation 4, dual-exponential replacement equation 1b, Willoughby, Darling, Rahn 2006): \\[ V_G(r) = V_o = V_{max,G}\\left[(1 - ) e^\\frac{R_{max} - r}{X_1} + e^\\frac{R_{max} - r}{X_2}\\right], R_2 < r \\] Finally, \\(r\\) \\(R_1\\) \\(R_2\\), first \\(\\xi\\) must calculated grid point (Willoughby, Darling, Rahn 2006): \\[ \\xi = \\frac{r - R_1}{R_2 - R_1} \\] : \\[ w = \\begin{cases} 0 & \\text{} \\xi \\le 0 \\\\ 126 \\xi^5 - 420 \\xi^6 + 540 \\xi^7- 315 \\xi^8 + 70 \\xi^9 & \\text{} 0 < \\xi , 1\\\\ 1 & \\text{} \\xi \\ge 1 \\end{cases} \\] : \\(w\\): Weighting variable \\(\\xi\\): nondimensional argument \\(r\\): radius storm center grid point (km) \\(R_{max}\\): radius maximum wind occurs (km) \\(R_1\\): lower boundary transition zone (km storm center) \\(R_2\\): upper boundary transition zone (km storm center) , \\(V(r)\\) calculated using (equation 1c, Willoughby, Darling, Rahn 2006): \\[ V_G(r) = V_i (1 - w) + V_o w, (R_1 \\le r \\le R_2) \\] wrapped function: includes several helper functions:","code":"stormwindmodel:::will1 ## function (cdist, Rmax, R1, R2, vmax_gl, n, A, X1, X2 = 25)  ## { ##     .Call(`_stormwindmodel_will1`, cdist, Rmax, R1, R2, vmax_gl,  ##         n, A, X1, X2) ## } ## <bytecode: 0x55a93220e158> ## <environment: namespace:stormwindmodel> stormwindmodel::will1a stormwindmodel:::will4 stormwindmodel::will2"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"estimate-surface-level-winds-from-gradient-winds","dir":"Articles","previous_headings":"Calculate wind speed at each grid point","what":"Estimate surface level winds from gradient winds","title":"Details of `stormwindmodel` package","text":"Now, get estimated symmetric surface-level tangential winds gradient-levels winds, code uses method Knaff et al. (2011). case, can always assume point land, water, since modeling exposure among humans. Therefore, code always uses reduction factor reduced 20%. method uses reduction factor 0.90 radius 100 km, reduction factor 0.75 radius 700 km greater, linear decreasing reduction factor radius two radius values (Knaff et al. 2011). point land (true county almost residence), reduction factor reduced 20%. function code uses part: reproduction part Figure 3 Knaff et al. (2011) using function:","code":"stormwindmodel:::gradient_to_surface ## function (wind_gl_aa, cdist, glandsea)  ## { ##     .Call(`_stormwindmodel_gradient_to_surface`, wind_gl_aa,  ##         cdist, glandsea) ## } ## <bytecode: 0x55a931dbafa8> ## <environment: namespace:stormwindmodel> rf_example <- data.frame(r = 0:800,                          rf = mapply(                            stormwindmodel:::gradient_to_surface,                             wind_gl_aa = 1, cdist = rep(0:800, 2), glandsea = rep(c(TRUE, FALSE), each = 801))) ggplot(rf_example, aes(x = r, y = rf)) +    geom_point() +    theme_classic() +    xlab(\"Radius (km)\") +    ylab(\"Reduction factor\") +    ylim(c(0.5, 0.9))"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"calculate-the-direction-of-gradient-winds-at-each-location","dir":"Articles","previous_headings":"Calculate wind speed at each grid point","what":"Calculate the direction of gradient winds at each location","title":"Details of `stormwindmodel` package","text":"far, model just calculated rotational component wind speed grid location (tangential wind). Now code adds back asymmetry forward motion component wind speed (translational wind) location. total storm winds increased forward motion storm right side storm Northern Hemisphere left side storm Southern Hemisphere. Conversely, opposite side storm, forward motion storm offset storm-related wind. ’ve already determined direction forward direction storm. Now, need get direction storm winds grid point location. First, function determines, storm location, direction storm center location. , package uses calc_bearing function described earlier determine bearing storm storm observation. Now, used calculate angle storm center grid point: Next, function calculates gradient wind direction based bearing location storm. gradient wind direction calculated adding 90 degrees bearing grid point storm center Northern Hemisphere subtracting 90 degrees Southern Hemisphere. direction constrained 0 360 degrees polar coordinates (0 degrees due East, 90 degrees due North, etc.).","code":"stormwindmodel:::calc_bearing ## function (tclat_1, tclon_1, tclat_2, tclon_2)  ## { ##     .Call(`_stormwindmodel_calc_bearing`, tclat_1, tclon_1, tclat_2,  ##         tclon_2) ## } ## <bytecode: 0x55a931f85c88> ## <environment: namespace:stormwindmodel> stormwindmodel:::calc_gwd ## function (tclat, tclon, glat, glon)  ## { ##     .Call(`_stormwindmodel_calc_gwd`, tclat, tclon, glat, glon) ## } ## <bytecode: 0x55a935e33e40> ## <environment: namespace:stormwindmodel>"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"calculate-the-surface-wind-direction","dir":"Articles","previous_headings":"Calculate wind speed at each grid point","what":"Calculate the surface wind direction","title":"Details of `stormwindmodel` package","text":"next step change gradient wind direction surface wind direction. , function adds inflow angle gradient wind direction Northern Hemisphere subtracts inflow angle Southern Hemisphere (making sure final answer 0 360 degrees). step necessary surface friction changes wind direction near surface compared higher surface, making wind direction turn towards center storm. inflow angle calculated function distance storm center location storm’s \\(R_{max}\\) observation point (eq. 11a–c, Phadke et al. 2003): \\[ \\beta = \\begin{cases} & 10 + \\left(1 + \\frac{r}{R_{max}}\\right) \\text{ } r < R_{max}\\\\ & 20 + 25\\left(\\frac{r}{R_{max}} - 1 \\right ) \\text{ } R_{max} \\le r \\le 1.2R_{max}\\\\ & 25 \\text{ } r \\ge 1.2R_{max} \\end{cases} \\] land, inflow angle 20 degrees water. Therefore, calculating inflow angle equation , function adds 20 degrees value since modeled locations land. final calculation, , , Northern Hemisphere: \\[ \\theta_S = \\theta_G + \\beta + 20 \\] Southern Hemisphere: \\[ \\theta_S = \\theta_G - \\beta - 20 \\] function step:","code":"stormwindmodel:::add_inflow ## function (gwd, cdist, Rmax, tclat, glandsea)  ## { ##     .Call(`_stormwindmodel_add_inflow`, gwd, cdist, Rmax, tclat,  ##         glandsea) ## } ## <bytecode: 0x55a935da5dc0> ## <environment: namespace:stormwindmodel>"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"add-back-in-wind-component-from-forward-speed-of-storm","dir":"Articles","previous_headings":"Calculate wind speed at each grid point","what":"Add back in wind component from forward speed of storm","title":"Details of `stormwindmodel` package","text":"Next, add back storm’s forward motion grid point, code reverses earlier step used Phadke correction factor (equation 12, Phadke et al. 2003). package calculates constant correction factor (correction_factor), function r, radius storm center grid point, \\(R_{max}\\), radius storm center maximum winds. \\[ U(r) = \\frac{R_{max}r}{R_{max}^2 + r^2}F \\] : \\(U(r)\\): Phadke correction factor radius \\(r\\) storm’s center \\(r\\): Radius storm’s center (km) \\(R_{max}\\): Radius maximum winds (km) \\(F\\): Forward speed storm (m / s) u- v-components forward speed corrected correction factor, components added u- v-components tangential surface wind. u- v-components used calculate magnitude total wind associated storm grid point:","code":"stormwindmodel:::add_forward_speed ## function (wind_sfc_sym, tcspd_u, tcspd_v, swd, cdist, Rmax)  ## { ##     .Call(`_stormwindmodel_add_forward_speed`, wind_sfc_sym,  ##         tcspd_u, tcspd_v, swd, cdist, Rmax) ## } ## <bytecode: 0x55a9377f4d10> ## <environment: namespace:stormwindmodel>"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"calculate-3-second-gust-wind-speed-from-sustained-wind-speed","dir":"Articles","previous_headings":"Calculate wind speed at each grid point","what":"Calculate 3-second gust wind speed from sustained wind speed","title":"Details of `stormwindmodel` package","text":"last step code calculates gust wind speed sustained wind speed applying gust factor: \\[ V_{sfc,gust} = G_{3,60}*V_{sfc} \\] \\(V_{sfc}\\) asymmetric surface wind speed, \\(V_{sfc,gust}\\) surface gust wind speed, \\(G_{3,60}\\) gust factor. table gust factors based location (Harper, Kepert, Ginger 2010): stormwindmodel package uses “-land” gust factor value throughout.","code":"gustspeed = windspeed * 1.49"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Details.html","id":"putting-everything-together","dir":"Articles","previous_headings":"","what":"Putting everything together","title":"Details of `stormwindmodel` package","text":"’s wrapper function called get_grid_winds puts everything together. inputs, takes storm tracks grid point locations. start dataset looks like: maximum sustained gust wind speeds (meters per second) duration winds 20 meters per second wind type (cutoff point can customized gust_duration sust_duration arguments) added grid point. code function: also function map county-level estimates. function work, winds must modeled county centers, FIPS codes used grid ids. ’s example calculating mapping county winds Katrina:","code":"data(\"katrina_tracks\") grid_winds_katrina <- get_grid_winds(hurr_track = katrina_tracks,                                      grid_df = county_points) head(grid_winds_katrina) ## # A tibble: 6 × 6 ##   gridid date_time_max_wind  vmax_sust vmax_gust sust_dur gust_dur ##   <chr>  <dttm>                  <dbl>     <dbl>    <dbl>    <dbl> ## 1 01001  2005-08-30 01:15:00     12.3       18.3        0        0 ## 2 01003  2005-08-29 15:45:00     20.5       30.5      135      840 ## 3 01005  2005-08-29 22:00:00      8.40      12.5        0        0 ## 4 01007  2005-08-30 02:45:00     15.2       22.6        0      510 ## 5 01009  2005-08-30 06:00:00     12.5       18.6        0        0 ## 6 01011  2005-08-29 22:15:00      9.56      14.2        0        0 stormwindmodel::get_grid_winds ## function (hurr_track = stormwindmodel::floyd_tracks, grid_df = stormwindmodel::county_points,  ##     tint = 0.25, gust_duration_cut = 20, sust_duration_cut = 20,  ##     max_dist = 2222.4)  ## { ##     grid_winds <- calc_grid_winds(hurr_track = hurr_track, grid_df = grid_df,  ##         tint = tint, max_dist = max_dist) ##     grid_winds_summary <- summarize_grid_winds(grid_winds = grid_winds$vmax_sust,  ##         gust_duration_cut = gust_duration_cut, sust_duration_cut = sust_duration_cut,  ##         tint = tint) ##     return(grid_winds_summary) ## } ## <bytecode: 0x55a934bb58e0> ## <environment: namespace:stormwindmodel> katrina_winds <- map_wind(grid_winds_katrina, value = \"vmax_gust\") +    ggtitle(\"Maximum gust wind speeds\") add_storm_track(katrina_tracks, plot_object = katrina_winds) katrina_winds <- map_wind(grid_winds_katrina, value = \"vmax_sust\") +    ggtitle(\"Maximum sustained wind speeds\") add_storm_track(katrina_tracks, plot_object = katrina_winds) # Show in knots katrina_winds <- map_wind(grid_winds_katrina, value = \"vmax_gust\",               wind_metric = \"knots\") +    ggtitle(\"Maximum gust wind speeds\") add_storm_track(katrina_tracks, plot_object = katrina_winds) katrina_winds <- map_wind(grid_winds_katrina, value = \"vmax_sust\",               wind_metric = \"knots\") +    ggtitle(\"Maximum sustained wind speeds\") add_storm_track(katrina_tracks, plot_object = katrina_winds) # Sustained winds of 20 m / s or more katrina_winds <- map_wind(grid_winds_katrina, value = \"vmax_sust\",           break_point = 20) add_storm_track(katrina_tracks, plot_object = katrina_winds) # Sustained winds of 34 knots or more katrina_winds <- map_wind(grid_winds_katrina, value = \"vmax_sust\",                           wind_metric = \"knots\", break_point = 34) add_storm_track(katrina_tracks, plot_object = katrina_winds) # Sustained winds of 50 knots or more katrina_winds <- map_wind(grid_winds_katrina, value = \"vmax_sust\",                           wind_metric = \"knots\", break_point = 50) add_storm_track(katrina_tracks, plot_object = katrina_winds) # Sustained winds of 64 knots or more katrina_winds <- map_wind(grid_winds_katrina, value = \"vmax_sust\",                           wind_metric = \"knots\",  break_point = 64) add_storm_track(katrina_tracks, plot_object = katrina_winds)"},{"path":[]},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Overview.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using the `stormwindmodel` package","text":"stormwindmodel package created allow users model wind speeds grid points around world based “best tracks” hurricane tracking data, using model wind speed developed Willoughby coauthors (2006). package includes functions interpolating hurricane tracks modeling mapping wind speeds storm. US, includes population mean center locations counties, can used map winds county; however, grid point locations can also input modeling, either model resolutions US model locations around world. Full details model fit provided “Details” vignette stormwindmodel package.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Overview.html","id":"package-example-data","dir":"Articles","previous_headings":"","what":"Package example data","title":"Using the `stormwindmodel` package","text":"examples vignette, package includes data tracks Hurricane Floyd 1999 Hurricane Katrina 2005 (vignettes show examples outside US, including Australia China). can load example best tracks data sets using: example data includes following columns: date: Date time observation (UTC time zone, usually used best tracks data sources like IBTrACS) latitude, longitude: Location storm time wind: Maximum sustained wind speed time (knots one-minute period 10 meters surface; IBTrACS data, wind measured averaging period available column titled “USA_WIND”) can input storm tracks wind modeling functions stormwindmodel package, must storm tracks format example dataframes columns names. necessary, use rename dplyr rename columns convert_wind_speed weathermetrics convert windspeed knots. also ensure understand time zone used recording data, maximum sustained wind recorded knots, 10 meters, based one-minute averaging period. wind speed data based different averaging period, may want consider using data IBTrACS alternative, since database includes column winds converted averaging period. stormwindmodel package also includes dataset location population mean center county eastern United States (county_points). dataset can used grid point inputs want model storm-related winds counties United States. counties listed Federal Information Processing Standard (FIPS) number, uniquely identifies U.S. county. dataset comes US Census file county population mean center locations, 2010 Census. dataset also includes column named glandsea, gives TRUE/FALSE value depending whether location land (TRUE) water (FALSE), required wind modeling process. case, since points represent US counties, values set TRUE. can use different dataset grid points model winds U.S. locations, locations world, including evenly-spaced grid points. However, need include grid points dataframe similar format example county_points dataframe, columns grid point id (gridid— IDs can random unique across grid points), glat glon latitude longitude grid point. also need include column named glandsea, specifies whether grid point land water. modeling locations land (example, human impacts study often measure exposure locations people live, may model points land), can set values column TRUE. modeling grid points, combination points land water, can use landmask function included package determine point land water, based latitude longitude. alternative covered detail separate vignette.","code":"library(stormwindmodel) data(\"floyd_tracks\") head(floyd_tracks) ## # A tibble: 6 × 4 ##   date         latitude longitude  wind ##   <chr>           <dbl>     <dbl> <dbl> ## 1 199909071800     14.6     -45.6    25 ## 2 199909080000     15       -46.9    30 ## 3 199909080600     15.3     -48.2    35 ## 4 199909081200     15.8     -49.6    40 ## 5 199909081800     16.3     -51.1    45 ## 6 199909090000     16.7     -52.6    45 data(\"katrina_tracks\") head(katrina_tracks) ## # A tibble: 6 × 4 ##   date         latitude longitude  wind ##   <chr>           <dbl>     <dbl> <dbl> ## 1 200508231800     23.1     -75.1    30 ## 2 200508240000     23.4     -75.7    30 ## 3 200508240600     23.8     -76.2    30 ## 4 200508241200     24.5     -76.5    35 ## 5 200508241800     25.4     -76.9    40 ## 6 200508250000     26       -77.7    45 data(county_points) head(county_points) ##   gridid     glat      glon glandsea ## 1  01001 32.50039 -86.49416     TRUE ## 2  01003 30.54892 -87.76238     TRUE ## 3  01005 31.84404 -85.31004     TRUE ## 4  01007 33.03092 -87.12766     TRUE ## 5  01009 33.95524 -86.59149     TRUE ## 6  01011 32.11633 -85.70119     TRUE"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Overview.html","id":"basic-example","dir":"Articles","previous_headings":"","what":"Basic example","title":"Using the `stormwindmodel` package","text":"main function package get_grid_winds. inputs storm tracks tropical cyclone (hurr_track) dataframe grid point locations (grid_df). models winds tropical storm grid point outputs summaries wind storm grid point storm. wind measurements generated grid point : vmax_sust: Maximum 10-m 1-minute sustained wind experienced grid point storm vmax_gust: Maximum 10-m 1-minute gust wind experienced grid point storm sust_dur: Duration sustained wind specified speed (default 20 m/s), minutes gust_dur: Duration gust wind specified speed (default 20 m/s), minutes example, get modeled winds Hurricane Floyd U.S. county centers, can run: use county_points data grid_df argument, model winds eastern U.S. county centers. case, gridid county FIPS. model winds U.S. county centers, can map results using map_wind function. default, function maps maximum sustained wind county storm meters per second:","code":"floyd_winds <- get_grid_winds(hurr_track = floyd_tracks, grid_df = county_points) floyd_winds %>%   dplyr::select(gridid, vmax_gust, vmax_sust, gust_dur, sust_dur) %>%   slice(1:6) ## # A tibble: 6 × 5 ##   gridid vmax_gust vmax_sust gust_dur sust_dur ##   <chr>      <dbl>     <dbl>    <dbl>    <dbl> ## 1 01001       2.98      2.00        0        0 ## 2 01003       1.97      1.32        0        0 ## 3 01005       4.82      3.23        0        0 ## 4 01007       2.32      1.56        0        0 ## 5 01009       2.61      1.75        0        0 ## 6 01011       4.09      2.74        0        0 map_wind(floyd_winds)"},{"path":[]},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Overview.html","id":"modeling-winds-at-other-grid-points","dir":"Articles","previous_headings":"Further functionality","what":"Modeling winds at other grid points","title":"Using the `stormwindmodel` package","text":"can input track Atlantic Basin tropical storm get_grid_winds, long convert meet following format requirements: dataframe class tbl_df (can use tbl_df function dplyr ) date: character vector date time (UTC), expressed YYYYMMDDHHMM. latitude: numeric vector latitude decimal degrees. longitude: numeric vector longitude decimal degrees. wind: numeric vector maximum storm wind speed knots, representing maximum 10-m 1-minute sustained wind grid point locations model, can input dataframe grid points anywhere world. example, may want map wind speeds Hurricane Katrina census tract Orleans Parish, LA. following code shows user stormwindmodel package. vignettes package give examples places United States. First, tigris package can used pull US Census tract shapefiles county. can use following code pull census tract file shapefiles Orleans Parish Louisiana: data includes columns area land area water census tract, can use create glandsea column, using rubric tract overland land area greater water area water . shapefile gives polygon census tract. can use st_centroid function sf package determine location center census tract: cleaning, can get data format required get_grid_winds function. particular, add geo id original shapefiles grid id, help map modeled wind results. can also extract latitude longitude geometry sf object put separate columns, needed wind modeling code: map census tracts, center point shown red dot:  Since new_orleans_tract_centers2 now appropriate format use stormwindmodel functions, can input directly get_grid_winds model winds Hurricane Katrina census tract center: plot modeled winds, can merge modeled data back “sf” version census tract shapefile data, joining geo identification, add map. can show wind speed map color.","code":"library(tigris) new_orleans <- tracts(state = \"LA\", county = c(\"Orleans\")) %>%    mutate(glandsea = ALAND > AWATER) library(sf) new_orleans_tract_centers <- st_centroid(new_orleans) head(new_orleans_tract_centers) ## Simple feature collection with 6 features and 14 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: -90.01988 ymin: 29.89858 xmax: -89.78792 ymax: 30.10123 ## Geodetic CRS:  NAD83 ##     STATEFP COUNTYFP TRACTCE       GEOID              GEOIDFQ  NAME ## 47       22      071  001758 22071001758 1400000US22071001758 17.58 ## 243      22      071  000617 22071000617 1400000US22071000617  6.17 ## 331      22      071  001748 22071001748 1400000US22071001748 17.48 ## 333      22      071  001747 22071001747 1400000US22071001747 17.47 ## 334      22      071  001750 22071001750 1400000US22071001750 17.50 ## 601      22      071  000800 22071000800 1400000US22071000800     8 ##               NAMELSAD MTFCC FUNCSTAT     ALAND   AWATER    INTPTLAT ## 47  Census Tract 17.58 G5020        S 169948955 95735784 +30.0986674 ## 243  Census Tract 6.17 G5020        S   1201874   277641 +29.9012380 ## 331 Census Tract 17.48 G5020        S   2067053        0 +30.0254915 ## 333 Census Tract 17.47 G5020        S   7119930   344001 +30.0414373 ## 334 Census Tract 17.50 G5020        S   1437944   166340 +30.0384832 ## 601     Census Tract 8 G5020        S    614812        0 +29.9596374 ##         INTPTLON                   geometry glandsea ## 47  -089.7948284 POINT (-89.78792 30.10123)     TRUE ## 243 -089.9940860 POINT (-89.99299 29.89858)     TRUE ## 331 -089.9554344 POINT (-89.95543 30.02549)     TRUE ## 333 -089.9549478 POINT (-89.95391 30.04018)     TRUE ## 334 -089.9176831 POINT (-89.91693 30.03769)     TRUE ## 601 -090.0198758 POINT (-90.01988 29.95964)     TRUE new_orleans_tract_centers2 <- new_orleans_tract_centers %>%    mutate(glon = unlist(purrr::map(.$geometry, 1)),          glat = unlist(purrr::map(.$geometry, 2))) %>%    rename(gridid = GEOID) %>%    st_drop_geometry() %>%   select(gridid, glat, glon, glandsea) head(new_orleans_tract_centers2) ##          gridid     glat      glon glandsea ## 47  22071001758 30.10123 -89.78792     TRUE ## 243 22071000617 29.89858 -89.99299     TRUE ## 331 22071001748 30.02549 -89.95543     TRUE ## 333 22071001747 30.04018 -89.95391     TRUE ## 334 22071001750 30.03769 -89.91693     TRUE ## 601 22071000800 29.95964 -90.01988     TRUE library(ggplot2) ggplot() +    geom_sf(data = new_orleans, aes(fill = glandsea)) +    geom_sf(data = new_orleans_tract_centers, color = \"red\", size = 0.6) +    scale_fill_manual(values = c(\"dodgerblue3\", \"bisque3\")) new_orleans_tracts_katrina <- get_grid_winds(hurr_track = katrina_tracks,                                               grid_df = new_orleans_tract_centers2) head(new_orleans_tracts_katrina) ## # A tibble: 6 × 6 ##   gridid      date_time_max_wind  vmax_sust vmax_gust sust_dur gust_dur ##   <chr>       <dttm>                  <dbl>     <dbl>    <dbl>    <dbl> ## 1 22071001758 2005-08-29 15:15:00      44.4      66.1      630     1110 ## 2 22071000617 2005-08-29 13:30:00      41.0      61.0      705     1125 ## 3 22071001748 2005-08-29 13:30:00      40.2      59.9      690     1110 ## 4 22071001747 2005-08-29 13:30:00      39.9      59.5      690     1110 ## 5 22071001750 2005-08-29 13:30:00      41.3      61.5      690     1110 ## 6 22071000800 2005-08-29 13:30:00      39.2      58.5      705     1110 new_orleans <- new_orleans %>%    left_join(new_orleans_tracts_katrina, by = c(\"GEOID\" = \"gridid\")) library(viridis) ggplot() +    geom_sf(data = new_orleans, aes(fill = vmax_sust)) +    scale_fill_viridis(name = \"Maximum\\nsustained\\nwinds (m/s)\")"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Overview.html","id":"creating-time-series-of-winds","dir":"Articles","previous_headings":"Further functionality","what":"Creating time series of winds","title":"Using the `stormwindmodel` package","text":"far, ’ve focused functions allow get overall summary high winds course storm certain location. also functions package allow extract complex versions wind data, estimate winds location time point along storm’s interpolated track (default, every 15 minutes). can allow create time series winds evolved course storm location modeling. example, can use calc_grid_winds calculate full time series winds Hurricane Floyd US county centers eastern US: creates array three matrices, dimensions. one matrix maximum sustained winds time point location (vmax_sust), distance grid point storm’s center time (distance_from_storm), surface wind direction (storm within certain distance storm, otherwise value set missing) (surface_wind_direction). matrices, rownames give date time estimate column names give grid ID (case, county FIPS code). ’s example subset wind matrix counties North Carolina around time highest winds state: can extract dataset timepoint, want see snapshot modeled winds specific time, extract grid point, want see winds changed course storm time point. example, code extract show modeled wind population mean center Dare County, NC (FIPS: 37055) throughout Hurricane Floyd:","code":"data(\"floyd_tracks\") data(\"county_points\")  floyd_timeseries_winds <- calc_grid_winds(hurr_track = floyd_tracks,                                            grid_df = county_points) str(floyd_timeseries_winds) ## List of 3 ##  $ vmax_sust             : num [1:1129, 1:2396] 0 0 0 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:1129] \"1999-09-07 18:00:00\" \"1999-09-07 18:15:00\" \"1999-09-07 18:30:00\" \"1999-09-07 18:45:00\" ... ##   .. ..$ : chr [1:2396] \"01001\" \"01003\" \"01005\" \"01007\" ... ##  $ distance_from_storm   : num [1:1129, 1:2396] 4582 4575 4569 4563 4557 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:1129] \"1999-09-07 18:00:00\" \"1999-09-07 18:15:00\" \"1999-09-07 18:30:00\" \"1999-09-07 18:45:00\" ... ##   .. ..$ : chr [1:2396] \"01001\" \"01003\" \"01005\" \"01007\" ... ##  $ surface_wind_direction: num [1:1129, 1:2396] NA NA NA NA NA NA NA NA NA NA ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:1129] \"1999-09-07 18:00:00\" \"1999-09-07 18:15:00\" \"1999-09-07 18:30:00\" \"1999-09-07 18:45:00\" ... ##   .. ..$ : chr [1:2396] \"01001\" \"01003\" \"01005\" \"01007\" ... floyd_timeseries_winds[[\"vmax_sust\"]][830:840, 1400:1410] ##                        37021    37023     37025    37027    37029    37031 ## 1999-09-16 09:15:00 5.721721 7.656765 11.278906 7.828813 15.66919 33.99837 ## 1999-09-16 09:30:00 5.677085 7.608157 11.178747 7.791503 16.19404 35.37429 ## 1999-09-16 09:45:00 5.627172 7.551176 11.064167 7.745253 16.72975 36.38580 ## 1999-09-16 10:00:00 5.572254 7.486155 10.935876 7.690341 17.27607 36.81890 ## 1999-09-16 10:15:00 5.512812 7.413697 10.794986 7.627322 17.83243 36.58173 ## 1999-09-16 10:30:00 5.448878 7.333884 10.641940 7.556236 18.39941 35.78599 ## 1999-09-16 10:45:00 5.380940 7.247366 10.477972 7.477700 18.97723 34.61118 ## 1999-09-16 11:00:00 5.309160 7.154417 10.303830 7.391960 19.56759 33.23651 ## 1999-09-16 11:15:00 5.233966 7.055642 10.120717 7.299606 20.17298 31.79015 ## 1999-09-16 11:30:00 5.155697 6.951551  9.929707 7.201140 20.79812 30.34873 ## 1999-09-16 11:45:00 5.074517 6.842460  9.731617 7.096869 21.45172 28.95170 ##                        37033    37035    37037    37039    37041 ## 1999-09-16 09:15:00 12.71196 8.765115 15.93226 3.551014 18.12575 ## 1999-09-16 09:30:00 12.82888 8.709713 15.96710 3.516742 18.68154 ## 1999-09-16 09:45:00 12.92891 8.644067 15.97514 3.479997 19.24211 ## 1999-09-16 10:00:00 13.01129 8.568563 15.95551 3.440952 19.80637 ## 1999-09-16 10:15:00 13.07562 8.483898 15.90790 3.399939 20.37308 ## 1999-09-16 10:30:00 13.12089 8.390207 15.83121 3.356923 20.94272 ## 1999-09-16 10:45:00 13.14683 8.288257 15.72561 3.312218 21.51651 ## 1999-09-16 11:00:00 13.15276 8.178414 15.59088 3.265877 22.04891 ## 1999-09-16 11:15:00 13.13849 8.061413 15.42785 3.218149 22.57024 ## 1999-09-16 11:30:00 13.10382 7.937893 15.23753 3.169215 23.12579 ## 1999-09-16 11:45:00 13.04836 7.808279 15.02100 3.119113 23.75651 library(lubridate) dare_winds <- floyd_timeseries_winds[[\"vmax_sust\"]][ , \"37055\"] %>%    enframe(name = \"date\", value = \"windspeed\") %>%    mutate(date = ymd_hms(date))  ggplot(dare_winds, aes(x = date, y = windspeed)) +    geom_line() +    xlab(\"Observation time (UTC)\") +    ylab(\"Modeled surface wind (m / s)\")"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Overview.html","id":"options-for-mapping-county-level-winds","dir":"Articles","previous_headings":"Further functionality","what":"Options for mapping county-level winds","title":"Using the `stormwindmodel` package","text":"number options mapping wind speeds using map_wind. First, can use add_storm_track function add storm track map. function inputs one dataframe tracking data (floyd_tracks example data comes package case) well plot object created using map_wind, input using plot_object argument. example code, ’ve first created base map modeled winds county using map_wind. input , along Floyd’s track data, add_storm_track create map winds storm tracks:  can choose whether map sustained gust winds (value, can take “vmax_gust” “vmax_sust”), well unit use wind speed (wind_metric, can take values “mps” meters per second [default] “knots”). example, can modeled gust wind speeds knots Hurricane Floyd using:  Finally, can map binary classification counties winds certain break point. example, map counties sustained wind 34 knots Hurricane Floyd, can run:","code":"floyd_map <- map_wind(floyd_winds) add_storm_track(floyd_tracks, plot_object = floyd_map) map_wind(floyd_winds, value = \"vmax_gust\", wind_metric = \"knots\") map_wind(floyd_winds, value = \"vmax_sust\", wind_metric = \"knots\", break_point = 34)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/Overview.html","id":"tracks-data","dir":"Articles","previous_headings":"","what":"Tracks data","title":"Using the `stormwindmodel` package","text":"can get R version hurricane best tracks data Atlantic basin storms 1988 2018 hurricaneexposuredata package (development GitHub). information, see GitHub repository package. can also get best tracks data tropical cyclones worldwide IBTrACS.","code":""},{"path":[]},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/modeling_outside_us.html","id":"creating-a-dataframe-with-grid-points","dir":"Articles","previous_headings":"","what":"Creating a dataframe with grid points","title":"Modeling storm winds outside the United States","text":"may dataframe latitude longitude points want model storm. example, may dataset location cities want model winds, may shapefile spatial information another geography area interest, can used starting point determine centroids, can model. However, starting dataset locations model, can still use package. case, ’ll want start creating grid points latitudes longitudes evenly spaced across area interest. section vignette walk can (already dataset points model , can skip section). don’t geographic dataset locations model winds, can create gridded geographic dataset region interest. sf package function can take existing geographic R object create regularly-spaced grid area object. can use create grid. First, get starting geographic R object, can use rnaturalearth package, provides spatial data countries subcountry geographies around world. can use get borders countries worldwide, crop object latitude longitude ranges interested . example, following code creates cropped geographical R object region 107 128 degrees longitude 17.5 34 degrees latitude, focusing area affected Typhoon Saomai 2006:  Next, can use st_make_grid function sf package create new objects regular grid area. can use function create two types grids: centers—provide point locations (latitude longitude) center grid—polygons—create geographic polygon shapes cover full grid. need point locations input model, may also want create polygon version use map output later. Just make sure , create types objects, use resolution (cellsize) create grid ID aligns two datasets (gridid = .character(1:n())) can connect modeled winds back polygon geographic data. code create types objects (can choose grid shapes either squares (square = TRUE) hexagons (square = FALSE). ’ve used hexagons). code creates map showing layers, transparency fill polygons (alpha = 0.4) can see layers:  Next, can use point location geographic object create regular dataframe can input wind model. process includes extracting geometry information (latitude longitude) separate columns, can using st_coordinates function sf package “dropping” geographic information object using st_drop_geometry (change object regular dataframe, rather spatial one). also involves using land/sea mask package determine points land water, can using check_land_function stormwindmodel package. can convert format ’s ready enter storm wind modeling function: can re-join dataframe spatial version plot check land/sea mask reasonable job capturing grid points land versus water:  like better resolution land / sea provided landmask, can use landmask dataset, high resolution focused area interest, create glandsea column need grid points dataset. Alternatively, modeling locaitons land (e.g., modeling city centers), set column always value TRUE.","code":"library(rnaturalearth) library(sf) library(tidyverse)  all_countries <-  ne_countries(scale = \"medium\",                                    returnclass = \"sf\") near_landfall <- all_countries %>%    st_make_valid() %>%    st_crop(y = st_bbox(c(xmin = 107, xmax = 128, ymin = 17.5, ymax = 34)))  ggplot() +    geom_sf(data = near_landfall) grid_near_landfall <- near_landfall %>%    st_make_grid(what = \"polygons\", square = FALSE, cellsize = 0.25) %>%    st_sf() %>%    mutate(gridid = as.character(1:n())) points_near_landfall <- near_landfall %>%    st_make_grid(what = \"centers\", square = FALSE, cellsize = 0.25) %>%    st_sf() %>%    mutate(gridid = as.character(1:n()))  ggplot() +    geom_sf(data = near_landfall) +    geom_sf(data = grid_near_landfall, color = \"red\", fill = NA, alpha = 0.4) +    geom_sf(data = points_near_landfall, color = \"blue\", fill = NA, alpha = 0.2, size = 0.5) points_to_model <- points_near_landfall %>%    mutate(glon = st_coordinates(.)[,1],          glat = st_coordinates(.)[,2]) %>%    st_drop_geometry() %>%    mutate(gridid = gridid,           glandsea = mapply(check_over_land, tclat = .$glat, tclon = .$glon))  head(points_to_model) #>   gridid    glon     glat glandsea #> 1      1 106.875 17.94102    FALSE #> 2      2 106.875 18.37404    FALSE #> 3      3 106.875 18.80705    FALSE #> 4      4 106.875 19.24006    FALSE #> 5      5 106.875 19.67308    FALSE #> 6      6 106.875 20.10609    FALSE points_near_landfall <- points_near_landfall %>%     left_join(points_to_model, by = \"gridid\")  ggplot() +    geom_sf(data = all_countries, fill = \"tan\") +    geom_sf(data = points_near_landfall, aes(color = glandsea), size = 0.8, alpha = 0.5) +    scale_color_manual(values = c(\"lightblue\", \"darkgreen\"), guide = \"none\") +    coord_sf(xlim = c(107, 128), ylim = c(17.5, 34))"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/modeling_outside_us.html","id":"preparing-storm-tracks-data-for-wind-model-function","dir":"Articles","previous_headings":"","what":"Preparing storm tracks data for wind model function","title":"Modeling storm winds outside the United States","text":"next step collect data central track wind speeds storm like model. data available storms worldwide IBTrACS, using source example . need reformat data prepare serve input wind modeling functions package. example dataset stormwindmodel package includes storm, Typhoon Saomai, affected area developed example grid last section. dataset included format read directly CSV file IBTrACS—changes (1) columns selected, rather columns available IBTrACS data, (2) column names changed uppercase lowercase. can input wind model code, ’ll need make changes dataset. First, date date-time format, ’ll need change character form , example, “200608040300” August 4, 2006 3 Greenwich Mean Time (UTM). name column “date”. Next, ’ll need convert columns latitude longitude numeric data types change column names “lat” “latitude” “lon” “longitude” (one way can using transmute, keep new columns). Finally, need convert column wind data (US conventions [wind averaging period height]) numeric data type rename column “usa_wind” “wind”. can steps following code: Now converted required data format needed run storm wind code. interested getting just maximum wind speeds grid point (, maximum wind point full course storm), can use get_grid_winds function . First, ’ll run function using dataset grid points created grid_df input track data Typhoon Saomai hurr_track input: output row every grid point, grid point IDs match grid point dataset created (can use ID link data back spatial data object, example, can plot winds). grid point, gives maximum surface-level sustained windspeed course storm (vmax_sust), maximum gust (vmax_gust—note obtained simple multiplicative factor vmax_sust), duration sustained gust winds 20 m/s (sust_dur gust_dur, respectively; note want change threshold 20 m/s another value, can sust_duration_cut gust_duration_cut parameters get_grid_winds), date time (given based Greenwich Mean Time [UTM] time zone) wind maximum grid point (typically, around time storm closest grid point, may cases ’s closest time point—example, since storm’s wind often decays rapidly landfall, local wind may highest storm still water, even storm later passes closer location). plot data, can join back spatial gridded dataframe, using grid ID match two datasets. gets data back sf object type, makes easy map:  can zoom map changing ranges coord_sf layer, example:  likely also want add storm track. information need , since latitude longitude storm track saomai_to_model object. However, add map, ’ll need convert sf object class specifying columns provide information well giving appropriate coordinate reference system number, can projected correctly.","code":"data(\"saomai_tracks\")  saomai_to_model <- saomai_tracks %>%    transmute(date = format(iso_time, format = \"%Y%m%d%H%M\"),              latitude = as.numeric(lat),              longitude = as.numeric(lon),             wind = as.numeric(usa_wind)) grid_winds <- get_grid_winds(hurr_track = saomai_to_model,                              grid_df = points_to_model)  head(grid_winds) #> # A tibble: 6 × 6 #>   gridid date_time_max_wind  vmax_sust vmax_gust sust_dur gust_dur #>   <chr>  <dttm>                  <dbl>     <dbl>    <dbl>    <dbl> #> 1 1      2006-08-11 19:15:00     0.240     0.357        0        0 #> 2 2      2006-08-11 19:30:00     0.272     0.405        0        0 #> 3 3      2006-08-11 19:30:00     0.309     0.460        0        0 #> 4 4      2006-08-11 19:30:00     0.350     0.521        0        0 #> 5 5      2006-08-11 19:30:00     0.396     0.590        0        0 #> 6 6      2006-08-11 19:30:00     0.447     0.667        0        0 modeled_near_landfall <- grid_near_landfall %>%     left_join(grid_winds, by = \"gridid\")  modeled_near_landfall %>%    head() #> Simple feature collection with 6 features and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 106.75 ymin: 17.79669 xmax: 107 ymax: 20.25043 #> Geodetic CRS:  WGS 84 #>   gridid  date_time_max_wind vmax_sust vmax_gust sust_dur gust_dur #> 1      1 2006-08-11 19:15:00 0.2395313 0.3569016        0        0 #> 2      2 2006-08-11 19:30:00 0.2719318 0.4051784        0        0 #> 3      3 2006-08-11 19:30:00 0.3085442 0.4597309        0        0 #> 4      4 2006-08-11 19:30:00 0.3497092 0.5210667        0        0 #> 5      5 2006-08-11 19:30:00 0.3958561 0.5898256        0        0 #> 6      6 2006-08-11 19:30:00 0.4474243 0.6666621        0        0 #>                         geometry #> 1 POLYGON ((106.875 17.79669,... #> 2 POLYGON ((106.875 18.2297, ... #> 3 POLYGON ((106.875 18.66271,... #> 4 POLYGON ((106.875 19.09572,... #> 5 POLYGON ((106.875 19.52874,... #> 6 POLYGON ((106.875 19.96175,... library(viridis) ggplot() +    geom_sf(data = modeled_near_landfall, aes(color = vmax_sust, fill = vmax_sust)) +    geom_sf(data = all_countries, fill = NA, color = \"white\") +    scale_color_viridis(option = \"B\") +    scale_fill_viridis(option = \"B\") +      coord_sf(xlim = c(107, 128), ylim = c(17.5, 34)) ggplot() +    geom_sf(data = modeled_near_landfall, aes(color = vmax_sust, fill = vmax_sust)) +    geom_sf(data = all_countries, fill = NA, color = \"white\") +    scale_color_viridis(option = \"B\") +    scale_fill_viridis(option = \"B\") +      coord_sf(xlim = c(116, 123), ylim = c(25, 30)) saomai_sf_points <- saomai_to_model %>%    st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = st_crs(modeled_near_landfall))  saomai_sf_line <- saomai_sf_points %>%   summarise(do_union = FALSE) %>%   st_cast(\"LINESTRING\")  ggplot() +    geom_sf(data = modeled_near_landfall, aes(color = vmax_sust, fill = vmax_sust)) +    geom_sf(data = all_countries, fill = NA, color = \"white\") +    geom_sf(data = saomai_sf_line, color = \"green\") +    geom_sf(data = saomai_sf_points, color = \"green\") +    scale_color_viridis(option = \"B\") +    scale_fill_viridis(option = \"B\") +      coord_sf(xlim = c(107, 128), ylim = c(17.5, 34)) ggplot() +    geom_sf(data = modeled_near_landfall, aes(color = vmax_sust, fill = vmax_sust)) +    geom_sf(data = all_countries, fill = NA, color = \"white\") +    geom_sf(data = saomai_sf_line, color = \"green\") +    geom_sf(data = saomai_sf_points, color = \"green\") +    scale_color_viridis(option = \"B\") +    scale_fill_viridis(option = \"B\") +      coord_sf(xlim = c(116, 123), ylim = c(25, 30))"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/articles/modeling_outside_us.html","id":"another-example-from-start-to-finish","dir":"Articles","previous_headings":"","what":"Another example, from start to finish","title":"Modeling storm winds outside the United States","text":"example entire process second storm, Typhoon Mangkhut 2018. , example dataset comes stormwindmodel package storm’s tracks. storms, instead start form data downloaded IBTrACS (example, one CSV-format datasets). gridded dataset cropped case focus area near storm’s landfall near Macau, Hong Kong, Guangzhou. Since area geographically focused, example use smaller size spacing grid points.  case, can see areas land-sea mask assigned grid points incorrectly near coastlines. likely resolution land-sea mask available stormwindmodel package, constrained reasonable size fit package. like finer resolution determining whether point land sea, can determine grid points using land-sea mask, higher resolution area ’re modeling. Conversely, modeling locations land (example, study human impacts storm), can assign grid points “TRUE” glandsea column.","code":"data(\"mangkhut_tracks\")  all_countries <-  ne_countries(scale = \"medium\",                                    returnclass = \"sf\") near_landfall <- all_countries %>%    st_make_valid() %>%    st_crop(y = st_bbox(c(xmin = 110, xmax = 117, ymin = 19, ymax = 25)))  grid_near_landfall <- near_landfall %>%    st_make_grid(what = \"polygons\", square = FALSE, cellsize = 0.1) %>%    st_sf() %>%    mutate(gridid = as.character(1:n())) points_near_landfall <- near_landfall %>%    st_make_grid(what = \"centers\", square = FALSE, cellsize = 0.1) %>%    st_sf() %>%    mutate(gridid = as.character(1:n()))  points_to_model <- points_near_landfall %>%    mutate(glon = sf::st_coordinates(.)[,1],          glat = sf::st_coordinates(.)[,2]) %>%    st_drop_geometry() %>%    mutate(gridid = gridid,           glandsea = mapply(check_over_land, tclat = .$glat, tclon = .$glon))  points_near_landfall <- points_near_landfall %>%     left_join(points_to_model, by = \"gridid\")  ggplot() +    geom_sf(data = near_landfall, fill = \"tan\") +    geom_sf(data = points_near_landfall, aes(color = glandsea), size = 0.8, alpha = 0.5) +    scale_color_manual(values = c(\"lightblue\", \"darkgreen\"), guide = \"none\") +    coord_sf(xlim = c(110, 117), ylim = c(19, 25)) data(\"mangkhut_tracks\")  mangkhut_to_model <- mangkhut_tracks %>%    transmute(date = format(iso_time, format = \"%Y%m%d%H%M\"),              latitude = as.numeric(lat),              longitude = as.numeric(lon),             wind = as.numeric(usa_wind))  grid_winds <- get_grid_winds(hurr_track = mangkhut_to_model,                              grid_df = points_to_model)  modeled_near_landfall <- grid_near_landfall %>%     left_join(grid_winds, by = \"gridid\")  mangkhut_sf_points <- mangkhut_to_model %>%    st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = st_crs(modeled_near_landfall))  mangkhut_sf_line <- mangkhut_sf_points %>%   summarise(do_union = FALSE) %>%   st_cast(\"LINESTRING\")  ggplot() +    geom_sf(data = modeled_near_landfall, aes(color = vmax_sust, fill = vmax_sust)) +    geom_sf(data = all_countries, fill = NA, color = \"white\") +    geom_sf(data = mangkhut_sf_line, color = \"green\") +    geom_sf(data = mangkhut_sf_points, color = \"green\") +    scale_color_viridis(option = \"B\") +    scale_fill_viridis(option = \"B\") +      coord_sf(xlim = c(110, 117), ylim = c(19, 25))"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brooke Anderson. Author, maintainer. Andrea Schumacher. Author. Seth Guikema. Author. Steven Quiring. Author. Joshua Ferreri. Author. Elizabeth Tennant. Author. Jordan Robinson. Author. Andrea Staid. Contributor. Michael Guo. Contributor. Lei Ming. Contributor. Laiyin Zhu. Contributor.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anderson B, Schumacher , Guikema S, Quiring S, Ferreri J, Tennant E, Robinson J (2025). stormwindmodel: Model Tropical Cyclone Wind Speeds. R package version 0.1.5.9, https://github.com/geanders/stormwindmodel.","code":"@Manual{,   title = {stormwindmodel: Model Tropical Cyclone Wind Speeds},   author = {Brooke Anderson and Andrea Schumacher and Seth Guikema and Steven Quiring and Joshua Ferreri and Elizabeth Tennant and Jordan Robinson},   year = {2025},   note = {R package version 0.1.5.9},   url = {https://github.com/geanders/stormwindmodel}, }"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Model Tropical Cyclone Wind Speeds","text":"stormwindmodel package created allow users model wind speeds grid points United States based “best tracks” hurricane tracking data, using model wind speed developed Willoughby coauthors (2006). package includes functions interpolating hurricane tracks modeling mapping wind speeds storm. includes population mean center locations U.S. counties, can used map winds county; however, grid point locations can also input modeling. Full details model fit provided “Details” vignette stormwindmodel package. package currently development GitHub. can install using install_github function devtools package using:","code":"devtools::install_github(\"geanders/stormwindmodel\", build_vignettes = TRUE)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/index.html","id":"package-example-data","dir":"","previous_headings":"","what":"Package example data","title":"Model Tropical Cyclone Wind Speeds","text":"examples, package includes data tracks Hurricane Floyd 1999 Hurricane Katrina 2005. can load example best tracks data sets using: example data includes following columns: date: Date time observation (UTC) latitude, longitude: Location storm time wind: Maximum wind speed time (knots) can input storm tracks wind modeling functions stormwindmodel package, must storm tracks format example dataframes columns names input tracks functions stormwindmodel. necessary, use rename dplyr rename columns convert_wind_speed weathermetrics convert windspeed knots. stormwindmodel package also includes dataset location population mean center U.S. county (county_points). dataset can used grid point inputs want model storm-related winds counties. counties listed Federal Information Processing Standard (FIPS) number, uniquely identifies U.S. county. dataset comes US Census file county population mean center locations, 2010 Census. can use different dataset grid points model winds U.S. locations, including across evenly spaced grid points. However, need include grid points dataframe similar format example dataframe, columns grid point id (gridid— IDs can random unique across grid points), glat glon latitude longitude grid point.","code":"library(stormwindmodel) data(\"floyd_tracks\") head(floyd_tracks) #> # A tibble: 6 × 4 #>   date         latitude longitude  wind #>   <chr>           <dbl>     <dbl> <dbl> #> 1 199909071800     14.6     -45.6    25 #> 2 199909080000     15       -46.9    30 #> 3 199909080600     15.3     -48.2    35 #> 4 199909081200     15.8     -49.6    40 #> 5 199909081800     16.3     -51.1    45 #> 6 199909090000     16.7     -52.6    45 data(\"katrina_tracks\") head(katrina_tracks) #> # A tibble: 6 × 4 #>   date         latitude longitude  wind #>   <chr>           <dbl>     <dbl> <dbl> #> 1 200508231800     23.1     -75.1    30 #> 2 200508240000     23.4     -75.7    30 #> 3 200508240600     23.8     -76.2    30 #> 4 200508241200     24.5     -76.5    35 #> 5 200508241800     25.4     -76.9    40 #> 6 200508250000     26       -77.7    45 data(county_points) head(county_points) #>   gridid     glat      glon glandsea #> 1  01001 32.50039 -86.49416     TRUE #> 2  01003 30.54892 -87.76238     TRUE #> 3  01005 31.84404 -85.31004     TRUE #> 4  01007 33.03092 -87.12766     TRUE #> 5  01009 33.95524 -86.59149     TRUE #> 6  01011 32.11633 -85.70119     TRUE"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/index.html","id":"basic-example","dir":"","previous_headings":"","what":"Basic example","title":"Model Tropical Cyclone Wind Speeds","text":"main function package get_grid_winds. inputs storm tracks tropical cyclone (hurr_track) dataframe grid point locations (grid_df). models winds tropical storm grid point outputs summaries wind storm grid point storm. wind measurements generated grid point : vmax_gust: Maximum 10-m 1-minute gust wind experienced grid point storm vmax_sust: Maximum 10-m 1-minute sustained wind experienced grid point storm gust_dur: Duration gust wind specified speed (default 20 m/s), minutes sust_dur: Duration sustained wind specified speed (default 20 m/s), minutes get modeled winds Hurricane Floyd U.S. county centers, can run: use coutny_points data comes package grid_df argument, model winds county centers. case, gridid county FIPS, stormwindmodel package function called map_wind mapping estimated winds county. default, maps maximum sustained wind county storm meters per second.","code":"floyd_winds <- get_grid_winds(hurr_track = floyd_tracks,                               grid_df = county_points) floyd_winds %>%   dplyr::select(gridid, vmax_gust, vmax_sust, gust_dur, sust_dur) %>%   slice(1:6) #> # A tibble: 6 × 5 #>   gridid vmax_gust vmax_sust gust_dur sust_dur #>   <chr>      <dbl>     <dbl>    <dbl>    <dbl> #> 1 01001       2.98      2.00        0        0 #> 2 01003       1.97      1.32        0        0 #> 3 01005       4.82      3.23        0        0 #> 4 01007       2.32      1.56        0        0 #> 5 01009       2.61      1.75        0        0 #> 6 01011       4.09      2.74        0        0 map_wind(floyd_winds)"},{"path":[]},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/index.html","id":"options-for-modeling-winds","dir":"","previous_headings":"Further functionality","what":"Options for modeling winds","title":"Model Tropical Cyclone Wind Speeds","text":"can input track Atlantic Basin tropical storm get_grid_winds, long convert meet following format requirements: dataframe class tbl_df (can use tbl_df function dplyr ) date: character vector date time (UTC), expressed YYYYMMDDHHMM. latitude: numeric vector latitude decimal degrees. longitude: numeric vector longitude decimal degrees. wind: numeric vector maximum storm wind speed knots grid point locations model, can input dataframe grid points anywhere eastern half United States. example, may want map wind speeds Hurricane Katrina census tract Orleans Parish, LA. following code shows user stormwindmodel package. First, tigris package can used pull US Census tract shapefiles county. can use following code pull census tract file shapefiles Orleans Parish Louisiana: shapefile gives polygon census tract. can use st_centroid function sf package determine location center census tract: map census tracts, center point shown red dot (note area water also included– included one census tract shapefiles pulled tigris Orleans Parish):  Since new_orleans_tract_centers now appropriate format use stormwindmodel functions, can input directly get_grid_winds model winds Hurricane Katrina census tract center: plot modeled winds, can merge modeled data back “sf” version census tract shapefile data, joining census tract identification, add map. can show wind speed map color.  also functions package can use create time series modeled winds specific grid point throughout storm. example, code calculate modeled wind population mean center Dare County, NC (FIPS: 37055) throughout Hurricane Floyd:  details, see “Details” vignette, walks steps modeling process.","code":"library(tigris)  new_orleans <- tracts(state = \"LA\", county = \"Orleans\") library(sf)  new_orleans_tract_centers <- st_centroid(new_orleans) #> Warning: st_centroid assumes attributes are constant over geometries head(new_orleans_tract_centers) #> Simple feature collection with 6 features and 13 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -90.01988 ymin: 29.89858 xmax: -89.78792 ymax: 30.10123 #> Geodetic CRS:  NAD83 #>     STATEFP COUNTYFP TRACTCE       GEOID              GEOIDFQ  NAME #> 47       22      071  001758 22071001758 1400000US22071001758 17.58 #> 243      22      071  000617 22071000617 1400000US22071000617  6.17 #> 331      22      071  001748 22071001748 1400000US22071001748 17.48 #> 333      22      071  001747 22071001747 1400000US22071001747 17.47 #> 334      22      071  001750 22071001750 1400000US22071001750 17.50 #> 601      22      071  000800 22071000800 1400000US22071000800     8 #>               NAMELSAD MTFCC FUNCSTAT     ALAND   AWATER    INTPTLAT #> 47  Census Tract 17.58 G5020        S 169948955 95735784 +30.0986674 #> 243  Census Tract 6.17 G5020        S   1201874   277641 +29.9012380 #> 331 Census Tract 17.48 G5020        S   2067053        0 +30.0254915 #> 333 Census Tract 17.47 G5020        S   7119930   344001 +30.0414373 #> 334 Census Tract 17.50 G5020        S   1437944   166340 +30.0384832 #> 601     Census Tract 8 G5020        S    614812        0 +29.9596374 #>         INTPTLON                   geometry #> 47  -089.7948284 POINT (-89.78792 30.10123) #> 243 -089.9940860 POINT (-89.99299 29.89858) #> 331 -089.9554344 POINT (-89.95543 30.02549) #> 333 -089.9549478 POINT (-89.95391 30.04018) #> 334 -089.9176831 POINT (-89.91693 30.03769) #> 601 -090.0198758 POINT (-90.01988 29.95964) library(ggplot2)  ggplot() +    geom_sf(data = new_orleans) +    geom_sf(data = new_orleans_tract_centers, color = \"red\", size = 0.6) new_orleans_centers <- bind_cols(   new_orleans_tract_centers,    st_coordinates(new_orleans_tract_centers) ) %>%   select(gridid = TRACTCE, glon = X, glat = Y) %>%   mutate(glandsea = mapply(check_over_land, glat, glon)) %>%   st_drop_geometry()  new_orleans_tracts_katrina <- get_grid_winds(hurr_track = katrina_tracks,                                               grid_df = new_orleans_centers) head(new_orleans_tracts_katrina) #> # A tibble: 6 × 6 #>   gridid date_time_max_wind  vmax_sust vmax_gust sust_dur gust_dur #>   <chr>  <dttm>                  <dbl>     <dbl>    <dbl>    <dbl> #> 1 001758 2005-08-29 13:30:00      56.2      83.8      900     1335 #> 2 000617 2005-08-29 13:30:00      41.0      61.0      705     1125 #> 3 001748 2005-08-29 13:30:00      40.2      59.9      690     1110 #> 4 001747 2005-08-29 13:30:00      39.9      59.5      690     1110 #> 5 001750 2005-08-29 13:30:00      41.3      61.5      690     1110 #> 6 000800 2005-08-29 13:30:00      39.2      58.5      705     1110 new_orleans <- new_orleans %>%    left_join(new_orleans_tracts_katrina, by = c(\"TRACTCE\" = \"gridid\")) library(viridis)  ggplot() +    geom_sf(data = new_orleans, aes(fill = vmax_sust)) +    geom_sf(data = new_orleans_tract_centers, color = \"red\", size = 0.6) +    scale_fill_viridis(name = \"Maximum\\nsustained\\nwinds (m/s)\") dare_county <- county_points %>% # Get grid point information for Dare County   filter(gridid == \"37055\")  with_wind_radii <- floyd_tracks %>%   create_full_track() %>% # Interpolate tracks to every 15 minutes   add_wind_radii()        # Calculate required inputs for Willoughby wind model  dare_winds <- calc_grid_wind(grid_point = dare_county,          # Model winds at one grid point                              with_wind_radii = with_wind_radii)  ggplot(dare_winds, aes(x = date, y = windspeed)) +    geom_line() +    xlab(\"Observation time (UTC)\") +    ylab(\"Modeled surface wind (m / s)\")"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/index.html","id":"options-for-mapping-county-level-winds","dir":"","previous_headings":"Further functionality","what":"Options for mapping county-level winds","title":"Model Tropical Cyclone Wind Speeds","text":"number options mapping wind speeds using map_wind. First, can use add_storm_track function add storm track map. function inputs one dataframe tracking data (floyd_tracks example data comes package case) well plot object created using map_wind, input using plot_object argument. example code, ’ve first created base map winds county using map_wind input , along Floyd’s track data, add_storm_track create map winds storm tracks:  can also choose whether map sustained gust winds (value, can take “vmax_gust” “vmax_sust”), well unit use wind speed (wind_metric, can take values “mps” [default] “knots”).  Finally, can map binary classification counties winds certain break point. example, map counties sustained wind 34 knots storm, can run:","code":"floyd_map <- map_wind(floyd_winds) add_storm_track(floyd_tracks, plot_object = floyd_map) map_wind(floyd_winds, value = \"vmax_gust\", wind_metric = \"knots\") map_wind(floyd_winds, value = \"vmax_sust\", wind_metric = \"knots\",          break_point = 34)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/index.html","id":"tracks-data","dir":"","previous_headings":"","what":"Tracks data","title":"Model Tropical Cyclone Wind Speeds","text":"can get R version best tracks data Atlantic basin storms 1988 2015 hurricaneexposuredata package (also development GitHub): storms currently included dataset:","code":"devtools::install_github(\"geanders/hurricaneexposuredata\") library(hurricaneexposuredata)  data(\"hurr_tracks\") hurr_tracks %>%    tidyr::separate(storm_id, c(\"storm\", \"year\")) %>%   dplyr::select(storm, year) %>%   dplyr::distinct() %>%   dplyr::group_by(year) %>%    dplyr::summarize(storms = paste(storm, collapse = \", \")) %>%    knitr::kable() #> Warning: Expected 2 pieces. Additional pieces discarded in 27 rows [3313, 3314, 3315, #> 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, #> 3329, 3330, 3331, 3332, ...]."},{"path":[]},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_forward_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Add in forward speed of the storm — add_forward_speed","title":"Add in forward speed of the storm — add_forward_speed","text":"Adds storm's forward speed component (.e., motion asymmetry) back estimated surface wind speed grid point location rotational winds modeled location.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_forward_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add in forward speed of the storm — add_forward_speed","text":"","code":"add_forward_speed(wind_sfc_sym, tcspd_u, tcspd_v, swd, cdist, Rmax)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_forward_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add in forward speed of the storm — add_forward_speed","text":"wind_sfc_sym numeric value estimated symmetric surface wind speed grid point, meters / second tcspd_u numeric value u-component tropical cyclone speed meters / second tcspd_v numeric value v-component tropical cyclone speed meters / second swd numeric value surface wind direction degrees cdist numeric value radius storm's center grid point kilometers Rmax numeric value radius maximum winds occur kilometers","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_forward_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add in forward speed of the storm — add_forward_speed","text":"windspeed numeric value asymmetric surface windspeed location, meters/second","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_forward_speed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add in forward speed of the storm — add_forward_speed","text":"function uses equation 12 Phadke et al. (2003).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_forward_speed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add in forward speed of the storm — add_forward_speed","text":"Phadke AC, Martino CD, Cheung KF, Houston SH. 2003. Modeling    tropical cyclone winds waves emergency management. Ocean    Engineering 30(4):553-578.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_inflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Add inflow to direction of surface winds — add_inflow","title":"Add inflow to direction of surface winds — add_inflow","text":"function adds inflow angle angle wind direction. calculates inflow angle function distance storm center location (Phadke et al. 2003). locations land, adds 20 degrees inflow angle account location land rather water.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_inflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add inflow to direction of surface winds — add_inflow","text":"","code":"add_inflow(gwd, cdist, Rmax, tclat, glandsea)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_inflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add inflow to direction of surface winds — add_inflow","text":"gwd numeric value gradient wind direction polar degrees (e.g., due east 0 degrees, due north 90 degrees) cdist distance center storm location wind modeled (kilometers) Rmax numeric value radius maximum winds occur kilometers tclat numeric value latitude radians glandsea logical value specifies whether location wind modeled land (TRUE) water (FALSE)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_inflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add inflow to direction of surface winds — add_inflow","text":"swd numeric value surface wind direction polar degrees   (e.g., due east 0, due north 90)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_inflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add inflow to direction of surface winds — add_inflow","text":"function uses equations 11a-c Phadke et al. (2003).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_inflow.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add inflow to direction of surface winds — add_inflow","text":"Phadke AC, Martino CD, Cheung KF, Houston SH. 2003. Modeling    tropical cyclone winds waves emergency management. Ocean    Engineering 30(4):553-578.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_storm_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Atlantic basin hurricane tracks — add_storm_track","title":"Plot Atlantic basin hurricane tracks — add_storm_track","text":"Plot tracks selected tropical storm map modeled wind speed.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_storm_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Atlantic basin hurricane tracks — add_storm_track","text":"","code":"add_storm_track(   storm_tracks,   plot_object,   plot_points = FALSE,   alpha = 1,   color = \"firebrick\" )"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_storm_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Atlantic basin hurricane tracks — add_storm_track","text":"storm_tracks data frame best tracks data storm track like add. See example floyd_tracks data example required format. dataset must include columns date (date-time track observation), latitude, longitude. plot_object NULL name ggplot object use underlying plot object (e.g., output call map_wind) plot_points TRUE / FALSE indicator whether include points, well lines, plotting hurricane tracks. alpha Numerical value designating amount transparency use plotting tracks. color Character string giving color use plot tracks.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_storm_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Atlantic basin hurricane tracks — add_storm_track","text":"ggplot object includes line track given    tropical storm. object can printed directly added    ggplot commands.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_storm_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Atlantic basin hurricane tracks — add_storm_track","text":"","code":"library(ggplot2) data(\"county_points\") data(\"floyd_tracks\") grid_winds_floyd <- get_grid_winds(hurr_track = floyd_tracks,                                    grid_df = county_points) floyd_map <- map_wind(grid_winds_floyd, value = \"vmax_sust\",                       wind_metric = \"knots\") +              ggtitle(\"Maximum sustained wind speeds\") add_storm_track(floyd_tracks, plot_object = floyd_map)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_wind_radii.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Willoughby inputs and parameters — add_wind_radii","title":"Add Willoughby inputs and parameters — add_wind_radii","text":"Calculates number inputs parameters needed Willoughby model observation storm track. function intakes imputed storm track calculates parameters observation storm tracks.inputs parameters later used model wind speed grid point every observation.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_wind_radii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Willoughby inputs and parameters — add_wind_radii","text":"","code":"add_wind_radii(full_track = create_full_track())"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_wind_radii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Willoughby inputs and parameters — add_wind_radii","text":"full_track dataframe interpolated hurricane track data, created create_full_track. dataframe must following columns: date: Date-time, POSIXct format UTC time zone tclat: Latitude (decimal degree) tclon: Longitude (decimal degrees), expressed positive         values (model assumes longitudes         Western hemisphere) vmax: Maximum 10-meter sustained wind speed (m / s)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_wind_radii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Willoughby inputs and parameters — add_wind_radii","text":"input dataset, columns added Willoughby    parameters every observations. Added columns include: tcdir: bearing storm, degrees, 0 degrees        indicating storm moving due east, 90 degrees indicating        storm moving due north, etc. tcspd_u, tcspd_v: u- v-components forward      speed storm, meters per second vmax_gl: maximum gradient-level 1-minute sustained        wind, m / s Rmax: radius maximum winds, kilometers X1, n, , R1, R2: Parameters needed        Willoughby wind model","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_wind_radii.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Willoughby inputs and parameters — add_wind_radii","text":"Willoughby , Darling RWR, Rahn . 2006. Parametric representation primary hurricane vortex. Part II: new family sectionally continuous profiles. Monthly Weather Review 134(4):1102-1120.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/add_wind_radii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Willoughby inputs and parameters — add_wind_radii","text":"","code":"data(\"floyd_tracks\") full_track <- create_full_track(hurr_track = floyd_tracks) with_wind_radii <- add_wind_radii(full_track = full_track) head(with_wind_radii) #>                  date    tclat     tclon    tcdir   tcspd_u  tcspd_v  vmax_gl #> 1 1999-09-07 18:00:00 14.60000 -45.60000 160.7715 -6.510216 2.270724 10.45952 #> 2 1999-09-07 18:15:00 14.61835 -45.65439 160.7863 -6.509378 2.268546 10.57943 #> 3 1999-09-07 18:30:00 14.63669 -45.70879 160.8174 -6.508274 2.264199 10.69988 #> 4 1999-09-07 18:45:00 14.65499 -45.76317 160.8649 -6.506877 2.257674 10.82088 #> 5 1999-09-07 19:00:00 14.67323 -45.81756 160.9287 -6.505188 2.248970 10.94242 #> 6 1999-09-07 19:15:00 14.69141 -45.87193 161.0090 -6.503234 2.238097 11.06449 #>       Rmax       X1         n          A       R1       R2 #> 1 50.49715 323.8680 0.5018371 0.02741166 35.19583 60.19583 #> 2 50.41901 323.6602 0.5034941 0.02788177 35.10915 60.10915 #> 3 50.34057 323.4513 0.5051589 0.02835462 35.02214 60.02214 #> 4 50.26179 323.2412 0.5068317 0.02883039 34.93479 59.93479 #> 5 50.18266 323.0299 0.5085126 0.02930918 34.84708 59.84708 #> 6 50.10319 322.8174 0.5102013 0.02979099 34.75901 59.75901"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/australian_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"A few Australian storm tracks datasets — australian_tracks","title":"A few Australian storm tracks datasets — australian_tracks","text":"dataframe containing tracking data three cyclones Australia (Larry 2006, George 2007, Yasi 2011, Marcia 2015). dataframe included use example storm tracks dataframes package documentation. data originally came International Best Track Archive Climate Stewardship (IBTrACS): https://www.ncdc.noaa.gov/ibtracs/","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/australian_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A few Australian storm tracks datasets — australian_tracks","text":"","code":"australian_tracks"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/australian_tracks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A few Australian storm tracks datasets — australian_tracks","text":"dataframe 99 rows 5 variables: iso_time date-time value giving time observation (UTC) lat numeric vector giving storm's latitude                     observation time lon numeric vector giving storm's longitude                     observation time usa_wind numeric vector giving estimated maximum sustained                 wind storm observation time, knots usa_rmw numeric vector giving estimated radius maximum wind,                 nautical miles. bom_wind numeric value giving estimate maximum mean wind around                 cyclone, based data Australian Tropical Cyclone Warning Centres.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/australian_tracks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A few Australian storm tracks datasets — australian_tracks","text":"https://www.ncei.noaa.gov/products/international-best-track-archive?name=sources","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_bearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate bearing from one location to another — calc_bearing","title":"Calculate bearing from one location to another — calc_bearing","text":"Calculates bearing second location, seen first location, based latitude longitude coordinates locations.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_bearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate bearing from one location to another — calc_bearing","text":"","code":"calc_bearing(tclat_1, tclon_1, tclat_2, tclon_2)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_bearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate bearing from one location to another — calc_bearing","text":"tclat_1 numeric vector giving latitude first location (degrees) tclon_1 numeric vector giving longitude first location (degrees). value expressed positive value Western hemisphere longitudes. tclat_2 numeric vector giving latitude second location (degrees) tclon_2 numeric vector giving longitude second location (degrees). value expressed positive value Western hemisphere longitudes.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_bearing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate bearing from one location to another — calc_bearing","text":"numeric vector giving direction second location first location,    degrees. direction 0 degrees indicates second location    due east first, 90 degrees indicates second location due    north first, etc (.e., polar, rather meteorological, coordinate system).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_bearing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate bearing from one location to another — calc_bearing","text":"function uses following equations calculate bearing    one latitude-longitude pair another: $$S = cos(\\phi_2) * sin(L_2 - L_1)$$ $$C = cos(\\phi_1) * sin(\\phi_2) - sin(\\phi_1) * cos(\\phi_2) * cos(L_2 - L_1)$$ $$\\theta = 90 - atan2(S, C) * \\frac{180}{\\pi}$$ : \\(\\phi_1\\): Latitude first location, radians \\(L_1\\): Longitude first location, radians \\(\\phi_2\\): Latitude second location, radians \\(L_2\\): Longitude second location, radians \\(S, C\\): Intermediary results \\(\\theta\\): Direction storm movement, degrees cases equation results values 0 degrees    360 degrees, function applies modular arithmetic bring value    back within 0–360 degree range.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_bearing_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate bearing from one lat/long to another for a single point — calc_bearing_single","title":"Calculate bearing from one lat/long to another for a single point — calc_bearing_single","text":"Calculate bearing one lat/long another single point","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_bearing_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate bearing from one lat/long to another for a single point — calc_bearing_single","text":"","code":"calc_bearing_single(tclat, tclon, glat, glon)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_bearing_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate bearing from one lat/long to another for a single point — calc_bearing_single","text":"tclat numeric value latitude tropical cyclone's center radians tclon numeric value longitude tropical cyclone's center radians glat numeric value latitude grid point radians glon numeric value longitude grid point radians","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_bearing_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate bearing from one lat/long to another for a single point — calc_bearing_single","text":"numeric value bearing storm's center grid point   polar coordinates (.e., due East 0 degrees, due North 90 degrees, etc.)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance between two latitude / longitude points — calc_distance","title":"Calculate distance between two latitude / longitude points — calc_distance","text":"Calculate distance two latitude / longitude points","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance between two latitude / longitude points — calc_distance","text":"","code":"calc_distance(tclat, tclon, glat, glon, Rearth = 6371)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance between two latitude / longitude points — calc_distance","text":"tclat numeric value latitude tropical cyclone's center radians tclon numeric value longitude tropical cyclone's center radians glat numeric value latitude grid point radians glon numeric value longitude grid point radians Rearth numeric value radius earth kilometers. value defaults 6,371 km, median radius earth.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance between two latitude / longitude points — calc_distance","text":"numeric value distance (kilometers) tropical   cyclone center grid point.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_forward_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate storm's forward speed — calc_forward_speed","title":"Calculate storm's forward speed — calc_forward_speed","text":"storm takes two storm locations observations times calculates average speed storm two observations.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_forward_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate storm's forward speed — calc_forward_speed","text":"","code":"calc_forward_speed(tclat_1, tclon_1, time_1, tclat_2, tclon_2, time_2)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_forward_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate storm's forward speed — calc_forward_speed","text":"tclat_1 numeric vector giving latitude first location (degrees) tclon_1 numeric vector giving longitude first location (degrees). value expressed positive value Western hemisphere longitudes. time_1 date-time vector giving time first observation. tclat_2 numeric vector giving latitude second location (degrees) tclon_2 numeric vector giving longitude second location (degrees). value expressed positive value Western hemisphere longitudes. time_2 date-time vector giving time second observation.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_forward_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate storm's forward speed — calc_forward_speed","text":"numeric vector average forward speed storm    two observations, meters per second.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gradient_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert symmetric surface wind to gradient wind. — calc_gradient_speed","title":"Convert symmetric surface wind to gradient wind. — calc_gradient_speed","text":"Converts maximum 10-m 1-minute symmetric sustained wind speed gradient wind speed. conversion factor depends whether storm land water.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gradient_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert symmetric surface wind to gradient wind. — calc_gradient_speed","text":"","code":"calc_gradient_speed(vmax_sfc_sym, over_land)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gradient_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert symmetric surface wind to gradient wind. — calc_gradient_speed","text":"vmax_sfc_sym numeric vector 1-minute sustained wind speed 10 meters, motion asymmetry removed (m / s). over_land TRUE / FALSE whether storm land (TRUE) water (FALSE).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gradient_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert symmetric surface wind to gradient wind. — calc_gradient_speed","text":"numeric vector maximum gradient-level 1-min wind speed (m / s).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gradient_speed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert symmetric surface wind to gradient wind. — calc_gradient_speed","text":"function uses following conversion:  $$V_{max,G} = \\frac{V_{max,sym}}{f_r}$$  : \\(V_{max,G}\\): Max gradient-level 1-min sustained wind (m / s) \\(V_{max,sym}\\): Max 10-m 1-min sustained wind motion         asymmetry removed (m / s) \\(f_r\\): Reduction factor (see ) function uses reduction factor based Figure 3 Knaff et al., 2011.    water within 100 kilometers storm's center,    ratio gradient wind speed surface wind speed    assumed 0.90. land, reduction factor reduced    20% (\\(0.9 * 0.8 = 0.72\\)). calculation, assume    radius    maximum wind storms 100 kilometers smaller (code,    calculate \\(R_{max}\\) estimate    gradient wind speed surface wind speed,    storm-specific estimate use ).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gradient_speed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert symmetric surface wind to gradient wind. — calc_gradient_speed","text":"Knaff JA, DeMaria M, Molenar DA, Sampson CR, Seybold MG. 2011. automated, objective, multiple-satellite-platform tropical cyclone surface wind speed analysis. Journal Applied Meteorology Climatology 50(10):2149-2166","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_wind.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate wind speed at grid points — calc_grid_wind","title":"Calculate wind speed at grid points — calc_grid_wind","text":"Uses Willoughby wind model (Willoughby et al. 2006) calculate wind speed grid point location. function calculates wind time series just one location.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_wind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate wind speed at grid points — calc_grid_wind","text":"","code":"calc_grid_wind(   grid_point = stormwindmodel::county_points[1, ],   with_wind_radii = add_wind_radii(),   max_dist = 2222.4 )"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_wind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate wind speed at grid points — calc_grid_wind","text":"grid_point one-row dataframe grid id, latitude, longitude, logical value whether point land (TRUE) water (FALSE) single location want model winds. with_wind_radii dataframe storm tracks, including inputs parameters Willoughby wind model, created add_wind_radii. max_dist numeric value giving (kilometers) maximum distance storm's center model storm-associated winds. value beyond distance automatically set 0 m / s storm-associated winds. default value 2222.4 km (1200 nautical miles).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_wind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate wind speed at grid points — calc_grid_wind","text":"dataframe date (date) modeled wind speed    (windspeed, m / s) grid point location storm    observations. also columns distance (far stomr    location timepoint) surface wind direction (polar    conventions, 0 degrees due East, 90 due North, etc.). storm    specified max_dist location, surface    wind direction calculated instead missing (NA)    value. data(\"floyd_tracks\") data(\"county_points\") full_track <- create_full_track(hurr_track = floyd_tracks) with_wind_radii <- add_wind_radii(full_track = full_track) wind_grid <- calc_grid_wind(grid_point = county_points[county_points$gridid == \"37055\", ],                             with_wind_radii = with_wind_radii) head(wind_grid)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_wind.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate wind speed at grid points — calc_grid_wind","text":"Knaff JA, DeMaria M, Molenar DA, Sampson CR, Seybold MG. 2011. automated, objective, multiple-satellite-platform tropical cyclone surface wind speed analysis. Journal Applied Meteorology Climatology 50(10):2149-2166 Phadke AC, Martino CD, Cheung KF, Houston SH. 2003. Modeling    tropical cyclone winds waves emergency management. Ocean    Engineering 30(4):553-578. Willoughby , Darling RWR, Rahn . 2006. Parametric representation primary hurricane vortex. Part II: new family sectionally continuous profiles. Monthly Weather Review 134(4):1102-1120.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_winds.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate hurricane winds at locations — calc_grid_winds","title":"Calculate hurricane winds at locations — calc_grid_winds","text":"function inputs storm track dataset locations calculates full time series windspeeds course storm location. also returns distance storm location time point, well surface wind direction time point storm within distance specified max_dist. assumed track data entered measured knots, 10 m surface level, 1-minute averaging period. dataset locations can either regularly-spaced grid can central points locations, like counties cities. counties eastern half United States, county_points dataset comes package can used grid_point input.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_winds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate hurricane winds at locations — calc_grid_winds","text":"","code":"calc_grid_winds(   hurr_track = stormwindmodel::floyd_tracks,   grid_df = stormwindmodel::county_points,   tint = 0.25,   max_dist = 2222.4 )"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_winds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate hurricane winds at locations — calc_grid_winds","text":"hurr_track Dataframe hurricane track data single storm. dataframe must include columns date-time (year, month, day, hour, minute; e.g., \"198808051800\" August 5, 1988, 18:00 UTC), latitude, longitude (degrees East), wind speed (knots). column names must date, latitude, longitude, wind. See example floyd_tracks dataset example required format. grid_df dataframe locations calculate wind characteristics. dataframe must include columns latitude longitude point, columns must named glat glon. latitudes longitudes decimal degrees, longitudes entered degrees East. Therefore Western hemisphere (, almost Atlantic basin storms) expressed negative values. tint Interval (hours) interpolate tracks. default 0.25 (.e., 15 minutes). max_dist numeric value giving (kilometers) maximum distance storm's center model storm-associated winds. value beyond distance automatically set 0 m / s storm-associated winds. default value 2222.4 km (1200 nautical miles).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_winds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate hurricane winds at locations — calc_grid_winds","text":"array three elements, first modeled wind speeds,   second distance storm location, third   angle surface winds. elements matrix, rows give   time points course storm columns give locations.   extracting column one matrices, can get time series   location course storm (example, extracting   column first element, can get time series windspeed   location course storm).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_grid_winds.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate hurricane winds at locations — calc_grid_winds","text":"function can take minutes run, depending number locations modeled. library(tibble) library(ggplot2) library(lubridate) data(\"floyd_tracks\") data(\"county_points\") floyd_winds <- calc_grid_winds(hurr_track = floyd_tracks, grid_df = county_points) dare_county_fips <- \"37055\" dare_floyd_winds <- floyd_winds[[\"vmax_sust\"]][ , dare_county_fips]    enframe(name = \"timepoint\", value = \"sustained_wind\") ggplot(dare_floyd_winds, aes(x = ymd_hms(timepoint), y = sustained_wind)) +   geom_line()","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gwd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gradient wind direction at a point — calc_gwd","title":"Calculate gradient wind direction at a point — calc_gwd","text":"function determines bearing storm's center grid point location calculates direction gradient winds grid point. Gradient winds perpendicular direction storm's center grid point. Northern hemisphere, cyclonic winds counterclockwise, add 90 degrees bearing storm center grid point using polar coordinates. Southern hemisphere, cyclonic winds clockwise, subtract 90 degrees.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gwd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gradient wind direction at a point — calc_gwd","text":"","code":"calc_gwd(tclat, tclon, glat, glon)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gwd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gradient wind direction at a point — calc_gwd","text":"tclat numeric value latitude tropical cyclone's center radians tclon numeric value longitude tropical cyclone's center radians glat numeric value latitude grid point radians glon numeric value longitude grid point radians","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_gwd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gradient wind direction at a point — calc_gwd","text":"numeric value direction gradient storm winds location,   polar coordinates (.e., due East 0 degrees, due North 90 degrees, etc.)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_linear_coefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate coefficients for linear interpolation — calc_linear_coefs","title":"Calculate coefficients for linear interpolation — calc_linear_coefs","text":"Calculate coefficients linear interpolation","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_linear_coefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate coefficients for linear interpolation — calc_linear_coefs","text":"","code":"calc_linear_coefs(x, y)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_linear_coefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate coefficients for linear interpolation — calc_linear_coefs","text":"x numeric vector independent values original function. y numeric vector dependent values original function.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/calc_linear_coefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate coefficients for linear interpolation — calc_linear_coefs","text":"numeric vector slope coefficients linear interpolation   original function. vector length one less input vectors.   slope section starting location x input vector.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/check_over_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if storm is over land or water — check_over_land","title":"Determine if storm is over land or water — check_over_land","text":"Determines storm land water observed location. function finds closest grid point landmask dataframe, checks grid point land water.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/check_over_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if storm is over land or water — check_over_land","text":"","code":"check_over_land(tclat, tclon)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/check_over_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if storm is over land or water — check_over_land","text":"tclat Numeric vector value latitude, degrees. tclon Numeric vector absolute value latitude, degrees.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/check_over_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if storm is over land or water — check_over_land","text":"logical vector whether storm land (TRUE) water    (FALSE)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/county_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Eastern U.S. county latitude and longitudes — county_points","title":"Eastern U.S. county latitude and longitudes — county_points","text":"dataframe containing locations population mean centers counties eastern United States. county identified 5-digit Federal Information Processing Standard (FIPS) code. dataframe can used model storm winds county center. dataset put together using dataframe U.S. Census Bureau, pulled website listed \"Source\".","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/county_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eastern U.S. county latitude and longitudes — county_points","text":"","code":"county_points"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/county_points.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Eastern U.S. county latitude and longitudes — county_points","text":"dataframe 2,396 rows 3 variables: fips character vector giving county's five-digit Federal                Information Processing Standard (FIPS) code glat numeric vector giving latitude population mean                    center county glon numeric vector giving longitude population mean                     center county glandsea logical vector specifying whether grid point                     land (TRUE) water (FALSE).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/county_points.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Eastern U.S. county latitude and longitudes — county_points","text":"http://www2.census.gov/geo/docs/reference/cenpop2010/county/CenPop2010_Mean_CO.txt","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/create_full_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute hurricane tracks to finer time scale — create_full_track","title":"Impute hurricane tracks to finer time scale — create_full_track","text":"Inputs data hurricane's track imputes finer time resolution. example, hurricane tracks recorded 6-hour intervals, used impute locations windspeeds 15-minute intervals. function also reformatting necessary later functions stormwindmodel package.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/create_full_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute hurricane tracks to finer time scale — create_full_track","text":"","code":"create_full_track(hurr_track = stormwindmodel::floyd_tracks, tint = 0.25)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/create_full_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute hurricane tracks to finer time scale — create_full_track","text":"hurr_track Dataframe hurricane track data single storm. dataframe must include columns date-time (year, month, day, hour, minute; e.g., \"198808051800\" August 5, 1988, 18:00 UTC), latitude, longitude (degrees East), wind speed (knots). column names must date, latitude, longitude, wind. See example floyd_tracks dataset example required format. tint Interval (hours) interpolate tracks. default 0.25 (.e., 15 minutes).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/create_full_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute hurricane tracks to finer time scale — create_full_track","text":"version storm's track data    latitude, longitude, wind speed interpolated    observed values. Also, wind speed converted function m / s    absolute value latitude taken (necessary    wind speed calculations). Finally, names columns    changed (tclat latitude, tclon longitude,    vmax wind speed.)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/create_full_track.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute hurricane tracks to finer time scale — create_full_track","text":"function uses natural cubic splines interpolation location linear splines interpolation wind speed.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/create_full_track.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Impute hurricane tracks to finer time scale — create_full_track","text":"function imputes original data point, starts    determining difference time pair data points.    , function can handle data includes point    one four daily synoptic times (00:00, 06:00, 12:00,    18:00). Typically, time hurricane observations given    outside synoptic times best tracks data landfall. imputing tracks, longitude expressed positive number.    output work correctly later functions fit    wind model. However, aware use negative value    longitude mapping tracks output function.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/create_full_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute hurricane tracks to finer time scale — create_full_track","text":"","code":"data(\"floyd_tracks\") full_track <- create_full_track(hurr_track = floyd_tracks)  # Interpolate to every half hour (instead of default 15 minutes) full_track <- create_full_track(hurr_track = floyd_tracks, tint = 0.5)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/find_x_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the location of a new value in a table of values — find_x_section","title":"Find the location of a new value in a table of values — find_x_section","text":"Find location new value table values","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/find_x_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the location of a new value in a table of values — find_x_section","text":"","code":"find_x_section(new_x, x)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/find_x_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the location of a new value in a table of values — find_x_section","text":"new_x double floating point number giving new value x want find indices sections vector x contain new value. x numeric vector want find position brackets new value, new_x.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/find_x_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the location of a new value in a table of values — find_x_section","text":"integer giving zero-based index position x vector   gives lower bracket section x-vector containing new   x value.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/floyd_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Hurricane Floyd tracks data — floyd_tracks","title":"Hurricane Floyd tracks data — floyd_tracks","text":"dataframe containing hurricane best tracks Hurricane Floyd 1999. dataframe included use example hurricane tracks dataframe package documentation. data originally came Extended Best Track dataset: http://rammb.cira.colostate.edu/research/tropical_cyclones/tc_extended_best_track_dataset/","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/floyd_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hurricane Floyd tracks data — floyd_tracks","text":"","code":"floyd_tracks"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/floyd_tracks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hurricane Floyd tracks data — floyd_tracks","text":"dataframe 48 rows 4 variables: date character string giving date time observation latitude numeric vector giving storm's latitude                     observation time longitude numeric vector giving storm's longitude                     observation time wind numeric vector giving estimated maximum sustained                 wind storm observation time, knots","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/floyd_tracks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hurricane Floyd tracks data — floyd_tracks","text":"http://rammb.cira.colostate.edu/research/tropical_cyclones/tc_extended_best_track_dataset/","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/get_grid_winds.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine hurricane winds at locations — get_grid_winds","title":"Determine hurricane winds at locations — get_grid_winds","text":"function inputs storm track dataset locations calculates highest wind speeds (sustained maximum) duration winds certain speed location. assumed track data entered measured knots, 10 m surface level, 1-minute averaging period. dataset locations can either regularly-spaced grid can central points locations, like counties cities. counties eastern half United States, county_points dataset comes package can used grid_point input.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/get_grid_winds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine hurricane winds at locations — get_grid_winds","text":"","code":"get_grid_winds(   hurr_track = stormwindmodel::floyd_tracks,   grid_df = stormwindmodel::county_points,   tint = 0.25,   gust_duration_cut = 20,   sust_duration_cut = 20,   max_dist = 2222.4 )"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/get_grid_winds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine hurricane winds at locations — get_grid_winds","text":"hurr_track Dataframe hurricane track data single storm. dataframe must include columns date-time (year, month, day, hour, minute; e.g., \"198808051800\" August 5, 1988, 18:00 UTC), latitude, longitude (degrees East), wind speed (knots). column names must date, latitude, longitude, wind. See example floyd_tracks dataset example required format. grid_df dataframe locations calculate wind characteristics. dataframe must include columns latitude longitude point, columns must named glat glon. latitudes longitudes decimal degrees, longitudes entered degrees East. Therefore Western hemisphere (, almost Atlantic basin storms) expressed negative values. tint Interval (hours) interpolate tracks. default 0.25 (.e., 15 minutes). gust_duration_cut wind speed, meters per second, use cutoff point determining duration gust winds. function calculate minutes storm surface-level gust winds speed location sust_duration_cut wind speed, meters per second, use cutoff point determining duration gust winds. function calculate minutes storm surface-level gust winds speed location. max_dist numeric value giving (kilometers) maximum distance storm's center model storm-associated winds. value beyond distance automatically set 0 m / s storm-associated winds. default value 2222.4 km (1200 nautical miles).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/get_grid_winds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine hurricane winds at locations — get_grid_winds","text":"dataframe locations input, following columns wind characteristics added location: vmax_gust: Maximum value surface-level (10 meters)        gust winds, meters per second, length        storm given location vmax_sust: Maximum value surface-level (10 meters)        sustained winds, meters per second, length        storm given location gust_duration: Length time, minutes,        surface-level gust winds specified value (default        20 m / s) sust_duration: Length time, minutes,        surface-level sustained winds specified value (default        20 m / s)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/get_grid_winds.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determine hurricane winds at locations — get_grid_winds","text":"function can take minutes run, depending number locations modeled. data(\"floyd_tracks\") data(\"county_points\") grid_winds <- get_grid_winds(hurr_track = floyd_tracks,                              grid_df = county_points)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/gradient_to_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate symmetrical surface wind from gradient wind — gradient_to_surface","title":"Calculate symmetrical surface wind from gradient wind — gradient_to_surface","text":"Calculates surface wind speed based estimated gradient wind speed point radius storm center grid point.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/gradient_to_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate symmetrical surface wind from gradient wind — gradient_to_surface","text":"","code":"gradient_to_surface(wind_gl_aa, cdist, glandsea)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/gradient_to_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate symmetrical surface wind from gradient wind — gradient_to_surface","text":"wind_gl_aa gradient-level wind location wind modeled (m/s) cdist distance center storm location wind modeled (kilometers) glandsea logical value specifies whether location wind modeled land (TRUE) water (FALSE)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/gradient_to_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate symmetrical surface wind from gradient wind — gradient_to_surface","text":"numeric value giving surface-level wind location (  incorporating role forward motion storm) (m/s)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/gradient_to_surface.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate symmetrical surface wind from gradient wind — gradient_to_surface","text":"reduction factor based Figure 3 Knaff et al., 2003. water, estimated 0.9 radius 100 km, 0.75 radius 700 km , decrease linearly radius 100 km 700 km. Points land use reduction factor 20% lower.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/gradient_to_surface.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate symmetrical surface wind from gradient wind — gradient_to_surface","text":"Knaff JA, DeMaria M, Molenar DA, Sampson CR, Seybold MG. 2011. automated, objective, multiple-satellite-platform tropical cyclone surface wind speed analysis. Journal Applied Meteorology Climatology 50(10):2149-2166","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interp_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate a storm track — interp_track","title":"Interpolate a storm track — interp_track","text":"function takes wider-spaced storm track (e.g., every 6 hours) interpolates finer interval (e.g., every 15 minutes). , fits GLMs latitude longitude regressed natural cubic splines date-time, predicts splines new intervals. splines use degrees freedom equal number original observations divided two.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interp_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate a storm track — interp_track","text":"","code":"interp_track(track, tint = 0.25)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interp_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate a storm track — interp_track","text":"track dataframe hurricane track data single storm. See floyd_tracks dataset comes package example required format dataframe. tint numeric vector giving time interval impute , units hours (e.g., 0.25, default, interpolates 15 minute-intervals).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interp_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate a storm track — interp_track","text":"dataframe hurricane track data single storm,    interpolated interval specified tint.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interpolate_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate new y-values using linear interpolation — interpolate_line","title":"Interpolate new y-values using linear interpolation — interpolate_line","text":"Interpolate new y-values using linear interpolation","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interpolate_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate new y-values using linear interpolation — interpolate_line","text":"","code":"interpolate_line(x, y, new_x)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interpolate_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate new y-values using linear interpolation — interpolate_line","text":"x numeric vector x values original function. y numeric vector y values original function. length x. new_x numeric value providing new x values want interpolate y values.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interpolate_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate new y-values using linear interpolation — interpolate_line","text":"numeric vector interpolated values y new   x values provided new_x input.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interpolate_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform spline interpolation — interpolate_spline","title":"Perform spline interpolation — interpolate_spline","text":"Perform spline interpolation","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interpolate_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform spline interpolation — interpolate_spline","text":"","code":"interpolate_spline(x, y, new_x)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interpolate_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform spline interpolation — interpolate_spline","text":"x numeric vector independent values original function. y numeric vector dependent values original function. new_x numeric vector values x want interpolate v values y.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/interpolate_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform spline interpolation — interpolate_spline","text":"numeric vector interpolated values y new_x values.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/katrina_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Hurricane Katrina tracks data — katrina_tracks","title":"Hurricane Katrina tracks data — katrina_tracks","text":"dataframe containing hurricane best tracks Hurricane Katrina 2005. dataframe included use example hurricane tracks dataframe package documentation. data originally came Extended Best Track dataset: http://rammb.cira.colostate.edu/research/tropical_cyclones/tc_extended_best_track_dataset/","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/katrina_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hurricane Katrina tracks data — katrina_tracks","text":"","code":"katrina_tracks"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/katrina_tracks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hurricane Katrina tracks data — katrina_tracks","text":"dataframe 48 rows 4 variables: date character string giving date time observation latitude numeric vector giving storm's latitude                     observation time longitude numeric vector giving storm's longitude                     observation time wind numeric vector giving estimated maximum sustained                 wind storm observation time, knots","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/katrina_tracks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hurricane Katrina tracks data — katrina_tracks","text":"http://rammb.cira.colostate.edu/research/tropical_cyclones/tc_extended_best_track_dataset/","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/landmask.html","id":null,"dir":"Reference","previous_headings":"","what":"Land-sea mask — landmask","title":"Land-sea mask — landmask","text":"dataframe gridded locations worldwide indicating whether point land water. land-sea mask used identify whether hurricane center observations likely land water, appropriate conversion factor can used estimate gradient winds sustained surface winds.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/landmask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Land-sea mask — landmask","text":"","code":"landmask"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/landmask.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Land-sea mask — landmask","text":"dataframe 1,082,401 rows 3 variables: longitude numeric vector longitude grid point latitude numeric vector latitude grid point land factor specifying whether grid point land water","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/make_interp.html","id":null,"dir":"Reference","previous_headings":"","what":"Make interp — make_interp","title":"Make interp — make_interp","text":"Make interp","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/make_interp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make interp — make_interp","text":"","code":"make_interp(x, y)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/make_interp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make interp — make_interp","text":"x numeric vector x values original function. y numeric vector y values original function. length x.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/mangkhut_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Typhoon Mangkhut tracks data — mangkhut_tracks","title":"Typhoon Mangkhut tracks data — mangkhut_tracks","text":"dataframe containing tracking data Typhoon Mangkhut 2018. dataframe included use example storm tracks dataframe package documentation. data originally came International Best Track Archive Climate Stewardship (IBTrACS): https://www.ncdc.noaa.gov/ibtracs/","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/mangkhut_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typhoon Mangkhut tracks data — mangkhut_tracks","text":"","code":"mangkhut_tracks"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/mangkhut_tracks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Typhoon Mangkhut tracks data — mangkhut_tracks","text":"dataframe 99 rows 5 variables: iso_time date-time value giving time observation (UTC) lat numeric vector giving storm's latitude                     observation time lon numeric vector giving storm's longitude                     observation time usa_wind numeric vector giving estimated maximum sustained                 wind storm observation time, knots usa_rmw numeric vector giving estimated radius maximum wind,                 nautical miles.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/mangkhut_tracks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Typhoon Mangkhut tracks data — mangkhut_tracks","text":"https://www.ncei.noaa.gov/products/international-best-track-archive?name=sources","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/map_wind.html","id":null,"dir":"Reference","previous_headings":"","what":"Map wind exposure at the county level — map_wind","title":"Map wind exposure at the county level — map_wind","text":"Inputs dataframe modeled winds eastern U.S. county maps modeled winds.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/map_wind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map wind exposure at the county level — map_wind","text":"","code":"map_wind(   grid_winds,   value = \"vmax_sust\",   break_point = NULL,   wind_metric = \"mps\" )"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/map_wind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map wind exposure at the county level — map_wind","text":"grid_winds dataframe output running get_grid_winds using eastern U.S. county centers grid point locations modeling winds. value character string giving value plot. Possible options \"vmax_gust\" (maximum gust wind speeds) \"vmax_sust\" (maximum sustained wind speeds). break_point numeric value giving value value parameter (e.g.,maximum gust wind speeds maximum sustained wind speeds) break binary map showing exposure versus exposure. default parameter NULL, returns map continuous wind speed values. break_point argument set numeric value, function return map counties given binary classifications \"exposed\" \"exposed\" based whether modeled wind speed county break point. wind_metric character vector wind metric use map. Possible values \"knots\" \"mps\" (m / s, default).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/map_wind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map wind exposure at the county level — map_wind","text":"function returns map ggplot class, plotting    exposure hurricane winds county eastern half United    States.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/map_wind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map wind exposure at the county level — map_wind","text":"","code":"data(\"katrina_tracks\") data(\"county_points\") grid_winds_katrina <- get_grid_winds(hurr_track = katrina_tracks,                                      grid_df = county_points) map_wind(grid_winds_katrina)  map_wind(grid_winds_katrina, wind_metric = \"knots\")  map_wind(grid_winds_katrina, value = \"vmax_gust\")  map_wind(grid_winds_katrina, break_point = 20)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/remove_forward_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove forward speed from maximum wind speed — remove_forward_speed","title":"Remove forward speed from maximum wind speed — remove_forward_speed","text":"Removes forward speed storm maximum storm wind speed, \\(V_{max}\\), estimate \\(V_{max,sym}\\), storm's maximum 10-m 1-min sustained wind motion asymmetry removed.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/remove_forward_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove forward speed from maximum wind speed — remove_forward_speed","text":"","code":"remove_forward_speed(vmax, tcspd)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/remove_forward_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove forward speed from maximum wind speed — remove_forward_speed","text":"vmax numeric vector giving maximum 10-m 1-minute sustained wind (m / s) tcspd numeric vector giving tropical cyclone's forward speed (m / s).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/remove_forward_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove forward speed from maximum wind speed — remove_forward_speed","text":"numerical vector \\(V_{max,sym}\\), storm's maximum 10-m 1-min sustained wind motion asymmetry removed, m / s.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/remove_forward_speed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove forward speed from maximum wind speed — remove_forward_speed","text":"function based equation 12 (accompanying    text) Phadke et al. 2003. Based paper, correction    factor forward speed highest radius    maximum winds, equals 0.5 times forward wind speed.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/remove_forward_speed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Remove forward speed from maximum wind speed — remove_forward_speed","text":"Phadke AC, Martino CD, Cheung KF, Houston SH. 2003. Modeling    tropical cyclone winds waves emergency management. Ocean    Engineering 30(4):553-578.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/saomai_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Typhoon Saomai tracks data — saomai_tracks","title":"Typhoon Saomai tracks data — saomai_tracks","text":"dataframe containing tracking data Typhoon Saomai 2006. dataframe included use example storm tracks dataframe package documentation. data originally came International Best Track Archive Climate Stewardship (IBTrACS): https://www.ncdc.noaa.gov/ibtracs/","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/saomai_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typhoon Saomai tracks data — saomai_tracks","text":"","code":"saomai_tracks"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/saomai_tracks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Typhoon Saomai tracks data — saomai_tracks","text":"dataframe 67 rows 5 variables: iso_time date-time value giving time observation (UTC) lat numeric vector giving storm's latitude                     observation time lon numeric vector giving storm's longitude                     observation time usa_wind numeric vector giving estimated maximum sustained                 wind storm observation time, knots usa_rmw numeric vector giving estimated radius maximum wind,                 nautical miles.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/saomai_tracks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Typhoon Saomai tracks data — saomai_tracks","text":"https://www.ncei.noaa.gov/products/international-best-track-archive?name=sources","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/solve_for_xi.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerically solve Willoughby Eqn. 3 for xi — solve_for_xi","title":"Numerically solve Willoughby Eqn. 3 for xi — solve_for_xi","text":"function uses Newton-Raphson method solve equation 3 (dual-exponential profile version) \\(\\xi\\) Willoughby et al. (2006). value \\(\\xi\\) can used determine \\(R_1\\) storm observation.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/solve_for_xi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerically solve Willoughby Eqn. 3 for xi — solve_for_xi","text":"","code":"solve_for_xi(xi0 = 0.5, eq3_right, eps = 0.001, itmax = 100)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/solve_for_xi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerically solve Willoughby Eqn. 3 for xi — solve_for_xi","text":"xi0 numeric value giving starting guess \\(\\xi\\) eq3_right numerical value right-hand side Willoughby et al. (2006), Eqn. 3, dual-exponential version. value calculated storm observation point using will3_right function, defined C++ code package. eps convergence threshold determining algorithm converged. itmax maximum number iterations try deciding algorithm converge.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/solve_for_xi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Numerically solve Willoughby Eqn. 3 for xi — solve_for_xi","text":"algorithm converge, function returns missing value    \\(\\xi\\).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/solve_for_xi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Numerically solve Willoughby Eqn. 3 for xi — solve_for_xi","text":"Jones O, Maillardet R, Robinson . 2009. Introduction Scientific Programming Simulation Using R. Boca Raton, FL: Chapman & Hall/CRC Press. Press WH, Teukolsky SA, Vetterling WT, Flannery BP. 2002. Numerical Recipes C++: Art Scientific Computing. 2nd ed. Cambridge, UK: Cambridge University Press. Willoughby , Darling RWR, Rahn . 2006. Parametric representation primary hurricane vortex. Part II: new family sectionally continuous profiles. Monthly Weather Review 134(4):1102-1120.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/summarize_grid_winds.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate wind summaries for grid points — summarize_grid_winds","title":"Generate wind summaries for grid points — summarize_grid_winds","text":"Summarizes wind time series grid points, created calc_grid_winds.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/summarize_grid_winds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate wind summaries for grid points — summarize_grid_winds","text":"","code":"summarize_grid_winds(   grid_winds,   gust_duration_cut = 20,   sust_duration_cut = 20,   tint = 0.25 )"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/summarize_grid_winds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate wind summaries for grid points — summarize_grid_winds","text":"grid_winds matrix column time series modeled wind speeds location, created calc_grid_winds. gust_duration_cut wind speed, meters per second, use cutoff point determining duration gust winds. function calculate minutes storm surface-level gust winds speed location sust_duration_cut wind speed, meters per second, use cutoff point determining duration gust winds. function calculate minutes storm surface-level gust winds speed location. tint Interval (hours) interpolate tracks. default 0.25 (.e., 15 minutes).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/summarize_grid_winds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate wind summaries for grid points — summarize_grid_winds","text":"Returns dataframe wind characteristics    location. wind characteristics given : vmax_gust: Maximum value surface-level (10 meters)        gust winds, meters per second, length        storm given location vmax_sust: Maximum value surface-level (10 meters)        sustained winds, meters per second, length        storm given location gust_duration: Length time, minutes,        surface-level gust winds specified value (default        20 meters per second) sust_duration: Length time, minutes,        surface-level sustained winds specified value (default        20 meters per second","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will1.html","id":null,"dir":"Reference","previous_headings":"","what":"Model wind speed at a grid point for a storm track observation — will1","title":"Model wind speed at a grid point for a storm track observation — will1","text":"Models gradient wind speed certain radius storm's center. , uses different equations subfunctions depending large radius (see details). function requires, inputs, Willoughby wind model parameters calculated using add_wind_radii function.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model wind speed at a grid point for a storm track observation — will1","text":"","code":"will1(cdist, Rmax, R1, R2, vmax_gl, n, A, X1, X2 = 25)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model wind speed at a grid point for a storm track observation — will1","text":"cdist numeric value distance grid point center storm (km) Rmax numeric value radius maximum wind occurs (km) R1 numeric value lower boundary transition zone (km storm center) R2 numeric value upper boundary transition zone (km storm center) vmax_gl numeric value maximum gradient level 1-minute sustained wind, (m/s) n numeric value giving power wind assumed increase radius within center storm (.e., center radius maximum wind) numeric value parameter 0 1 Willoughby model X1 numeric value parameter Willoughby model X2 numeric value parameter Willoughby model, set 25 (Willoughby, Darling, Rahn 2006)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model wind speed at a grid point for a storm track observation — will1","text":"Returns numeric vector gradient wind speed radius    \\(r\\) storm's center, meters per second.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model wind speed at a grid point for a storm track observation — will1","text":"\\(r \\le R_1\\), function calculating equation: $$V(r) = V_i = V_{max} \\left( \\frac{r}{R_{max}} \\right)^n$$ : \\(V(r)\\): Maximum sustained gradient wind speed radius        \\(r\\) storm's center \\(r\\): Radius storm center, kilometers \\(V_{max,G}\\): Maximum sustained gradient wind speed        storm, meters per second \\(R_1\\): parameter Willoughby wind model (radius        start transition region) \\(R_{max}\\): Radius (kilometers) highest winds \\(n\\): parameter Willoughby wind model \\(R_2 < r\\), function calculating      equation: $$V(r) = V_o = V_{max}\\left[(1 - ) e^\\frac{R_{max} - r}{X_1} + e^\\frac{R_{max} - r}{X_2}\\right]$$ : \\(V(r)\\): Maximum sustained gradient wind speed radius        \\(r\\) kilometers storm's center \\(r\\): Radius storm center, kilometers \\(V_{max,G}\\): Maximum sustained gradient wind speed        storm, meters per second \\(R_{max}\\): Radius (kilometers) highest winds \\(\\), \\(X_1\\), \\(X_2\\): Parameters         Willoughby wind model \\(R_1 < r \\le R_2\\), function uses      equations: $$\\xi = \\frac{r - R_1}{R_2 - R_1}$$ , \\(0 \\le \\xi < \\le 1\\) (otherwise, \\(w = 0\\)): $$w = 126 \\xi^5 - 420 \\xi^6 + 540 \\xi^7- 315 \\xi^8 + 70 \\xi^9$$ : $$V(r) = V_i (1 - w) + V_o w, (R_1 \\le r \\le R_2)$$ , series equations: \\(V(r)\\): Maximum sustained gradient wind speed radius        \\(r\\) kilometers storm's center \\(r\\): Radius storm center, kilometers \\(w\\): Weighting variable \\(R_1\\), \\(R_2\\): Parameters Willoughby wind model","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model wind speed at a grid point for a storm track observation — will1","text":"Willoughby , Darling RWR, Rahn . 2006. Parametric representation primary hurricane vortex. Part II: new family sectionally continuous profiles. Monthly Weather Review 134(4):1102-1120.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate equation 2 from Willoughby — will2","title":"Calculate equation 2 from Willoughby — will2","text":"Calculate equation 2 Willoughby","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate equation 2 from Willoughby — will2","text":"","code":"will2(r, R1, R2)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate equation 2 from Willoughby — will2","text":"r numeric value giving distance center storm location like model local wind, kilometers R1 numeric value lower boundary transition zone (km storm center) R2 numeric value upper boundary transition zone (km storm center)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate equation 2 from Willoughby — will2","text":"numeric value 0 1 gives amount weight Vi   versus Vo estimating wind within transition zone.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate equation 2 from Willoughby — will2","text":"Willoughby , Darling RWR, Rahn . 2006. Parametric representation primary hurricane vortex. Part II: new family sectionally continuous profiles. Monthly Weather Review 134(4):1102-1120.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will3_deriv_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the function value and derivative for Willoughby Eqn. 3 — will3_deriv_func","title":"Calculate the function value and derivative for Willoughby Eqn. 3 — will3_deriv_func","text":"Calculates values function derivative function trying solve root Eqn. 3 (version using dual exponential profile) Willoughby et al. (2006).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will3_deriv_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the function value and derivative for Willoughby Eqn. 3 — will3_deriv_func","text":"","code":"will3_deriv_func(xi, eq3_right)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will3_deriv_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the function value and derivative for Willoughby Eqn. 3 — will3_deriv_func","text":"xi numerical value \\(\\xi\\) Willoughby et al. (2006), Eqn. 2 eq3_right numerical value right-hand side Willoughby et al. (2006), Eqn. 3, dual-exponential version. value calculated storm observation point using will3_right function, defined C++ code package.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will3_deriv_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the function value and derivative for Willoughby Eqn. 3 — will3_deriv_func","text":"numeric vector length two. first value calculated    value \\(f'(x)\\) \\(x = \\xi\\), second value    calculated value \\(f(x)\\) \\(x = \\xi\\). two values    used iterating Newton-Raphson method determine    \\(\\xi\\).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will3_deriv_func.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the function value and derivative for Willoughby Eqn. 3 — will3_deriv_func","text":"Willoughby , Darling RWR, Rahn . 2006. Parametric representation primary hurricane vortex. Part II: new family sectionally continuous profiles. Monthly Weather Review 134(4):1102-1120.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will7a.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate radius of maximum winds — will7a","title":"Calculate radius of maximum winds — will7a","text":"Calculates radius maximum wind occurs (\\(R_{max}\\)), based maximum gradient-level 1-min sustained wind (\\(V_{max,G}\\)) latitude (\\(\\phi\\)). function implements Willoughby et al. (2006), Equation 7a.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will7a.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate radius of maximum winds — will7a","text":"","code":"will7a(vmax_gl, tclat)"},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will7a.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate radius of maximum winds — will7a","text":"vmax_gl Maximum gradient-level 1-min sustained wind tropical cyclone tclat Numeric vector value latitude, degrees.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will7a.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate radius of maximum winds — will7a","text":"numeric vector \\(R_{max}\\), radius maximum    winds, kilometers.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will7a.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate radius of maximum winds — will7a","text":"function fits following equation: $$R_{max} = 46.4 e^{- 0.0155 V_{max,G} + 0.0169\\phi}$$ : \\(R_{max}\\): Radius storm center point maximum wind occurs (km) \\(V_{max,G}\\): Tangential wind component gradient-level maximum wind speed (m / s) \\(\\phi\\): Absolute value latitude (decimal degrees)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/reference/will7a.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate radius of maximum winds — will7a","text":"Willoughby , Darling RWR, Rahn . 2006. Parametric representation primary hurricane vortex. Part II: new family sectionally continuous profiles. Monthly Weather Review 134(4):1102-1120.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/news/index.html","id":"stormwindmodel-014","dir":"Changelog","previous_headings":"","what":"stormwindmodel 0.1.4","title":"stormwindmodel 0.1.4","text":"CRAN release: 2020-07-27 Resolve warning CRAN building vignettes. Due change one packages used one vignette, vignette building error. tigris package changed import Census spatial files sf objects default, rather sp objects. caused error later code worked objected imported vignette. resolved explicitly requesting object tigris sp class vignette code.","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/news/index.html","id":"stormwindmodel-013","dir":"Changelog","previous_headings":"","what":"stormwindmodel 0.1.3","title":"stormwindmodel 0.1.3","text":"CRAN release: 2020-04-01 Resolve warning CRAN rebuilding vignettes Windows seems resulted use caching one vignette. Remove dplyr functions deprecated (‘select_’, ‘mutate_’, ‘filter_’)","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/news/index.html","id":"stormwindmodel-012","dir":"Changelog","previous_headings":"","what":"stormwindmodel 0.1.2","title":"stormwindmodel 0.1.2","text":"CRAN release: 2020-01-10 Resolve warning CRAN rebuilding vignettes Windows Improve method interpolating storm tracks synoptic times. Now uses natural cubic spline location (latitude longitude) linear interpolation maximum wind speed (line interpolation ibtracs).","code":""},{"path":"https://ryanzomorrodi.github.io/stormwindmodel/news/index.html","id":"stormwindmodel-011","dir":"Changelog","previous_headings":"","what":"stormwindmodel 0.1.1","title":"stormwindmodel 0.1.1","text":"CRAN release: 2018-10-15 Added NEWS.md file track changes package. Removed use ggmap within vignette README examples.","code":""}]
